<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.youis.top</id>
    <title>Eden的博客</title>
    <updated>2020-04-24T06:37:46.279Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.youis.top"/>
    <link rel="self" href="https://blog.youis.top/atom.xml"/>
    <subtitle>浮生若梦，人生几何</subtitle>
    <logo>https://blog.youis.top/images/avatar.png</logo>
    <icon>https://blog.youis.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Eden的博客</rights>
    <entry>
        <title type="html"><![CDATA[又拍云使用]]></title>
        <id>https://blog.youis.top/post/iobZKkOLk/</id>
        <link href="https://blog.youis.top/post/iobZKkOLk/">
        </link>
        <updated>2020-04-24T06:32:56.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://image.youis.top/20200424142140.png" alt="" loading="lazy"></figure>
<p>香不香，15G的流量。还可以https</p>
<figure data-type="image" tabindex="2"><img src="https://image.youis.top/20200424142927.png" alt="" loading="lazy"></figure>
<p>有一点就是，添加logo的时候，是点击图片，就可以访问官网。</p>
<p>参考代码：</p>
<pre><code class="language-html">&lt;a href=&quot;https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral&quot;&gt;&lt;img src=&quot;https://www.z4a.net/images/2020/04/20/_logo5.png&quot; alt=&quot;_logo5.png&quot; border=&quot;0&quot; width=&quot;100&quot; height=&quot;20&quot; /&gt;&lt;/a&gt;
</code></pre>
<h1 id="如何开启https">如何开启HTTPS</h1>
<p>创建服务后，点击https，点击管理。添加证书即可，在又拍云购买的免费证书，需要几分钟认证。</p>
<figure data-type="image" tabindex="3"><img src="https://image.youis.top/20200424142517.png" alt="" loading="lazy"></figure>
<p>其他使用还是和七牛云差不多的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第四次作业]]></title>
        <id>https://blog.youis.top/post/sRdAP2jaU/</id>
        <link href="https://blog.youis.top/post/sRdAP2jaU/">
        </link>
        <updated>2020-04-22T01:54:31.000Z</updated>
        <summary type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
]]></summary>
        <content type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
<!-- more -->
<p>1、首先生成包含1000个随机字符的字符串，然后统计每个字符的出现次数。<br>
参考string字符串模块的元组：</p>
<pre><code>import string
import random

x = string.ascii_letters + string.digits + string.punctuation
# print(x)
y = [random.choice(x) for i in range(1000)]  # 生成包含1000个随机字符的字符串
# print(y)
dic = dict()  # 使用字典保存每个字符出现次数
for ch in y:
    dic[ch] = dic.get(ch, 0) + 1  # d.get(ch,0) 返回ch出现的次数，若没有返回0
print(dic)
# nums = 0
# for values in dic.values():
#     nums += values
# print(nums)
</code></pre>
<p>2、写代码：有如下字典<br>
按照要求实现每一个功能</p>
<pre><code>dic = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}

# 1、请循环遍历出所有的key
for key in dic:
    print(key)
# 2、请循环遍历出所有的value
for value in dic.values():
    print(value)
# 3、请循环遍历出所有的key和value
for key, value in dic.items():
    print(key, value)
# 4、请在字典中增加一个键值对,&quot;k4&quot;:&quot;v4&quot;，输出添加后的字典
dic[&quot;k4&quot;] = &quot;v4&quot;
print(dic)
# 5、请删除字典中键值对&quot;k1&quot;:&quot;v1&quot;,并输出删除后的结果
dic.pop(&quot;k1&quot;)
print(dic)
# 6、请删除字典中键&quot;k5&quot;对应的键值对，如果字典中不存在键&quot;k5&quot;,则不报错，返回None
print(dic.pop(&quot;k5&quot;, None))
# 7、请获取字典中&quot;k2&quot;对应的值
print(dic[&quot;k2&quot;])
# 8、请获取字典中&quot;k6&quot;对应的值,如果不存在，则不报错，并且让其返回None。
print(dic.get(&quot;k6&quot;))
# 9、现有dict2 = {&quot;k1&quot;:&quot;v11&quot;,&quot;a&quot;:&quot;b&quot;},通过一行操作使dict2 = {&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;,&quot;k3&quot;:&quot;v3&quot;,&quot;a&quot;:&quot;b&quot;}
dict1 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}
dict2 = {&quot;k1&quot;: &quot;v11&quot;, &quot;a&quot;: &quot;b&quot;}
dict2.update(dict1)
print(dict2)
</code></pre>
<p>3、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能</p>
<pre><code># 10、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能
lis = [[&quot;k&quot;, [&quot;qwe&quot;, 20, {&quot;k1&quot;: [&quot;tt&quot;, 3, &quot;1&quot;]}, 89], &quot;ab&quot;]]
# 10.1、将列表中的字符串“tt”变成字符串&quot;TT&quot;(用两种方法)
#  方法一：
lis[0][1][2][&quot;k1&quot;][0] = &quot;TT&quot;
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[0] = &quot;TT&quot;
print(lis)
# 10.2、将列表中的字符串&quot;1&quot;变成数字101(用两种方法)
lis[0][1][2][&quot;k1&quot;][2] = 101
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[2] = 101
print(lis)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python爬虫抓包工具]]></title>
        <id>https://blog.youis.top/post/iumJPhy8A/</id>
        <link href="https://blog.youis.top/post/iumJPhy8A/">
        </link>
        <updated>2020-04-21T06:19:52.000Z</updated>
        <summary type="html"><![CDATA[<p>爬虫的基本原理就是模拟客户端（可以是浏览器，也有可能是APP）向远程服务器发送 HTTP 请求，我们需要知道目标服务器的 HOST、URI、请求方法、请求参数、请求头、请求体。Web 网站通过 Chrome 浏览器可以找到这些信息。但是对于 APP 爬虫，就显得有些束手无策。这时候必须借用一些抓包工具来辅助我们分析APP背后的秘密。</p>
]]></summary>
        <content type="html"><![CDATA[<p>爬虫的基本原理就是模拟客户端（可以是浏览器，也有可能是APP）向远程服务器发送 HTTP 请求，我们需要知道目标服务器的 HOST、URI、请求方法、请求参数、请求头、请求体。Web 网站通过 Chrome 浏览器可以找到这些信息。但是对于 APP 爬虫，就显得有些束手无策。这时候必须借用一些抓包工具来辅助我们分析APP背后的秘密。</p>
<!-- more -->
<p>今天推荐4个HTTP代理工具通过抓包分析，帮助你还原APP背后的每个请求。</p>
<h1 id="fiddler">Fiddler</h1>
<p>Fiddler 是 Windows 平台最好用的可视化抓包工具，也是大家最熟知的 HTTP 代理工具，功能非常强大，除了可以清晰的了解每个请求与响应之外，还可以进行断点设置，修改请求数据、拦截响应内容。</p>
<p>此外，还可以自定义规则，通过修改脚本，加入自己的特殊处理，不过因为它是 C# 编写的，如果你要写复杂的脚本，需要懂C#。</p>
<p>过滤器功能使得你可以通过正则表达式规则将你关心的请求显示出来，如果你只需要抓特定网站的数据，这个功能就显得非常有用，可以去除很多干扰信息。</p>
<h1 id="charles">Charles</h1>
<p>Charles 是 macOS 平台下最好用的抓包分析工具之一，同样提供GUI界面，界面简洁，基本功能包括HTTP、HTTPS 请求抓包，支持请求参数的修改，最新的 Charles 4 还支持 HTTP/2。当然，也同时支持Windows 和 Linux， 不过这款工具是要收费的，免费试用 30 天，试用期过后功能受限。</p>
<h1 id="anyproxy">AnyProxy</h1>
<p>AnyProxy 是 阿里巴巴开源的 HTTP 抓包工具，基于 NodeJS 实现，优点是支持二次开发，可自定义请求处理逻辑，如果你会写JS的话，同时需要做一些自定义的处理，那么AnyProxy 是非常适合的。支持 HTTPS，提供了GUI界面。 GitHub地址：https://github.com/alibaba/anyproxy</p>
<h1 id="mitmproxy">mitmproxy</h1>
<p>mitmproxy 是一款基于 Python，支持 SSL 的抓包工具，用 Python 写爬虫的一定会很喜欢，因为他不仅是跨平台的，而且提供的是命令行交互模式，很有极（zhuang）客（bi）感。mitmproxy 包含 3 款工具：</p>
<p>mitmproxy: 带交互的终端界面<br>
mitmdump: mitmproxy 的命令行版本，类似于 tcpdump<br>
libmproxy: 用于 mitmproxy/mitmdump 的库<br>
GitHub 地址：https://github.com/mitmproxy/mitmproxy</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第三次作业]]></title>
        <id>https://blog.youis.top/post/python-di-san-ci-zuo-ye/</id>
        <link href="https://blog.youis.top/post/python-di-san-ci-zuo-ye/">
        </link>
        <updated>2020-04-18T08:59:47.000Z</updated>
        <summary type="html"><![CDATA[<p>1.现有商品列表如下：</p>
<p>products =   [[&quot;iphone&quot;,6888],[&quot;MacPro&quot;,14800],[&quot;小米6&quot;,2499],[&quot;Coffee&quot;,31],[&quot;Book&quot;,60],[&quot;Nike&quot;,699]]，</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.现有商品列表如下：</p>
<p>products =   [[&quot;iphone&quot;,6888],[&quot;MacPro&quot;,14800],[&quot;小米6&quot;,2499],[&quot;Coffee&quot;,31],[&quot;Book&quot;,60],[&quot;Nike&quot;,699]]，</p>
<!-- more -->
<p>需打印出以下格式：<br>
------商品列表------<br>
0 iphone 6888<br>
1 MacPro 14800<br>
2 小米6 2499<br>
3 Coffee 31<br>
4 Book 60<br>
5 Nike 699、</p>
<pre><code class="language-python"># encoding: utf-8
products = [[&quot;iphone&quot;, 6888], [&quot;MacPro&quot;, 14800], [&quot;小米6&quot;, 2499], [&quot;Coffee&quot;, 31], [&quot;Book&quot;, 60], [&quot;Nike&quot;, 699]]
print(&quot;------商品列表------&quot;)
for index, info in enumerate(products):
    print(index, info[0], info[1])
</code></pre>
<ol start="2">
<li>python 用户在键盘上输入一个自然数n，然后在区间[1, 5n]上随机生成n个不重复的自然数，输出这些自然数， 然后继续编写代码对这些自然数进行处理，只保留所有偶数，并输出这些偶数</li>
</ol>
<pre><code class="language-python">import random
n = int(input(&quot;请输入一个自然数N: &quot;))
numList = random.sample(range(1, 5 * n + 1), n)
print(numList)
outList = list(filter(lambda x: (x + 1) % 2, numList))  # （x+1）奇偶互换
print(outList)

</code></pre>
<ol start="3">
<li>编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。</li>
</ol>
<pre><code class="language-python">import random
numList = [random.randint(0, 9) for i in range(20)]
print(numList)
print(sorted(numList[:10]) + sorted(numList[10:], reverse=True))
</code></pre>
<ol start="4">
<li>编写程序，让用户在键盘上输入一个包含若干整数的列表，输出翻转后的列表。</li>
</ol>
<pre><code class="language-python">inputList = eval(input(&quot;请输入一个列表&quot;))
print(inputList[::-1])
</code></pre>
<p>元组练习：（选作）<br>
5.	写代码，有如下元祖，按照要求实现每一个功能<br>
print(&quot;----------------------------------------------&quot;)  tu = (&quot;alex&quot;, &quot;eric&quot;, &quot;Witharush&quot;)</p>
<pre><code class="language-python">
print(&quot;----------------------------------------------&quot;)
tu = (&quot;alex&quot;, &quot;eric&quot;, &quot;Witharush&quot;)
# a.计算元祖长度并输出
print(&quot;元组长度  %d&quot; % len(tu))
# b.获取元祖的第二个元素，并输出 print(tu[1])
print(tu[1])
# c.获取元祖的第 1-2 个元素，并输出
print(tu[0:2])
# d.请使用for输出元祖的元素
for i in tu:
    print(i)
# e.请使用for，len，range输出元素的索引
for j in range(len(tu)):
    print(j)
# f.请使用enumerate输出元祖元素和序号（序号从10开始）
for i, v in enumerate(tu, 10):
    print(i, v)
</code></pre>
<p>扩展练习：<br>
有以下列表<br>
nums = [2, 7, 11, 15, 1, 8]<br>
请找到列表中任意相加等于9的元素集合，如：[(2, 7), (1, 8)]</p>
<pre><code class="language-python">nums = [2, 7, 11, 15, 1, 8]
outNums = [(nums[i], nums[j]) for i in range(len(nums))
           for j in range(i + 1, len(nums))
           if nums[i] + nums[j] == 9]
print(outNums)

# 第二种解法
nums = [2, 7, 11, 15, 2, 1, 8]
nums_set = list(set(nums))  # 转集合的目的是为了去重
outNums = [(i, j) for index, i in enumerate(nums_set)
           for j in nums_set[index+1:]
           if i + j == 9]
print(outNums)  # [(1, 8), (2, 7)]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第二次作业]]></title>
        <id>https://blog.youis.top/post/python-di-er-ci-zuo-ye/</id>
        <link href="https://blog.youis.top/post/python-di-er-ci-zuo-ye/">
        </link>
        <updated>2020-04-18T07:55:08.000Z</updated>
        <summary type="html"><![CDATA[<p>顺便吐槽一下，我们老师。<br>
每节课都有作业。。。。<br>
🙃🙃🙃🙃</p>
]]></summary>
        <content type="html"><![CDATA[<p>顺便吐槽一下，我们老师。<br>
每节课都有作业。。。。<br>
🙃🙃🙃🙃</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/4/14 14:38
@file: problem.py
@desc: 
&quot;&quot;&quot;

# 创建一个空列表，命名为names，往里面添加 Lihua、Rain、Jack、Xiuxiu、Peiqi和Black元素。
names = list()
names.append(&quot;Lihua&quot;)
names.append(&quot;Rain&quot;)
names.append(&quot;Jack&quot;)
names.append(&quot;Xiuxiu&quot;)
names.append(&quot;Peiqi&quot;)
names.append(&quot;Black&quot;)
# Names=[]
# Names.append(“”)
# 往1中的names列表里Black前面插入一个Blue。
names.insert(-1, &quot;Blue&quot;)
# 把names列表中Xiuxiu的名字改成中文。
names[names.index(&quot;Xiuxiu&quot;)] = &quot;秀秀&quot;
# 往names列表中Rain后面插入一个子列表[&quot;oldboy&quot;,&quot;oldgirl&quot;]。
names.insert(names.index(&quot;Rain&quot;)+1, [&quot;oldboy&quot;, &quot;oldgirl&quot;])
print(names)  # 验证
# 返回names列表中Peiqi的索引值（下标）
print(names.index(&quot;Peiqi&quot;))
# 创建新列表[1,2,3,4,2,5,6,2,]，合并到names列表中。
numbers = [1, 2, 3, 4, 2, 5, 6, 2]
names.extend(numbers)  # extend()方法表示合并
print(names)
# 取出names列表中索引4-7的元素。
print(names[4:8])
# 取出names列表中索引2-10的元素，步长为2
print(names[2:11:2])
# 取出names列表中最后3个元素。
print(names[-3:])  # [-3:]表示取值范围为从列表的倒数第三个到末尾
# 循环names列表，打印每个元素的索引值和元素。
for index, i in enumerate(names):
    print(index, i)
    # 循环names列表，打印每个元素的索引值和元素，当索引值为偶数时，把对应的元素改成-1。
for index, i in enumerate(names):
    if index % 2 == 0:
        names[index] = -1
        # print(index, i)
print(names)
# names列表里有3个2，请返回第二个2的索引值，动态找

print(names.index(2, names.index(2) + 1),)
</code></pre>
<p>好了，不多说了。我要去写第三次作业了。😘😘😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python十一道练习]]></title>
        <id>https://blog.youis.top/post/python-shi-yi-dao-lian-xi/</id>
        <link href="https://blog.youis.top/post/python-shi-yi-dao-lian-xi/">
        </link>
        <updated>2020-04-13T07:32:23.000Z</updated>
        <summary type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
]]></summary>
        <content type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
<!-- more -->
<p>1.编写程序，输入一个自然数字符串，然后输出各位数字之和。例如，输入字符串1234，输出10.</p>
<pre><code class="language-python">from functools import reduce

input_str = input(&quot;请输入一个字符串&quot;)

print(reduce(lambda x, y: int(x) + int(y), input_str))
</code></pre>
<p>2.编写程序，输入一个字符串，输出翻转（首尾交替）后的字符串。例如，输入字符串12345，输出54321.</p>
<pre><code class="language-python">input_str = input(&quot;请输入一个字符串&quot;)
input_str = input_str[::-1]
print(input_str)
</code></pre>
<p>3.编写程序，输入一个包含若干整数的列表，输出列表中的最大值。例如，输入[1，2，3，4，5，888]，输出888.</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
print(max(input_list))
</code></pre>
<p>4.编写程序，输入一个包含若干整数的列表，把列表中所有整数转换为字符串，然后输出包含这些字符串的列表。例如，输入[1，2，3，4，5，888]，输出['1'，'2'，'3'，'4'，'5'，'888']。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

print(list(map(str, input_list)))

</code></pre>
<p>5.编写程序，输入一个包含若干任意数据的列表，输出该列表中等价于True的元素组成的列表。例如，输入[1，2，0，None，False，'a']，输出[1，2，'a']。</p>
<pre><code class="language-python">def fun(new_str):
    if new_str is None:
        return False
    if new_str is False:
        return False
    if new_str == 0:
        return False
    return True


input_list = eval(input(&quot;请输入一个列表&quot;))
OutList = list(filter(fun, input_list))
print(OutList)
</code></pre>
<p>6.编写程序，输入一个包含若干自然数的列表，输出这些自然数的平均值。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
out_int = reduce((lambda x, y: x + y), input_list)
print(&quot;%.3f&quot; % (out_int / len(input_list)))
</code></pre>
<p>7.编写程序，输入一个包含若干自然数的列表，输出这些自然数降序排列的新列表。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

new_list = sorted(input_list, reverse=True)
print(new_list)
</code></pre>
<p>8.编写程序，输入一个包含若干自然数的列表，输出一个新列表，新列表中每个元素为原列表中每个自然数的位数。例如，输入[1，888，99，23456]，输出为[1，3，2，5]。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = list(map(lambda x: len(str(x)), input_list))
print(out_list)
</code></pre>
<p>9.编写程序，输入一个包含若干实数的列表，输出其中绝对值最大的实数。例如，输入[-8，64，3.5，-89]，输出-89。</p>
<pre><code class="language-python">from functools import reduce


def fun(x, y):
    if abs(x) &gt; abs(y):
        return x
    else:
        return y


input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = reduce(fun, input_list)
print(out_list)
</code></pre>
<p>10.编写程序，输入一个包含若干整数的列表，输出这些整数的乘积。例如，输入[-2，3，4]，输出-24。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
output = reduce(lambda x, y: x * y, input_list)
print(output)
</code></pre>
<p>11.编写程序，输入两个包含着若干整数的等长列表，把这两个列表看作两个向量，输出这两个向量的内积。</p>
<pre><code class="language-python">from functools import reduce

li1 = eval(input('请输入第一个列表'))
li2 = eval(input('请输入第二个列表'))
print(list(reduce(lambda x, y: x * y, (li1, li2))))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python笔记]]></title>
        <id>https://blog.youis.top/post/pythonbiji/</id>
        <link href="https://blog.youis.top/post/pythonbiji/">
        </link>
        <updated>2020-04-13T06:58:53.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="身份运算符">身份运算符</h1>
<p>身份运算符用于比较两个对象的<strong>内存地址</strong>是否一致——是否是对同一个对象的引用</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="身份运算符">身份运算符</h1>
<p>身份运算符用于比较两个对象的<strong>内存地址</strong>是否一致——是否是对同一个对象的引用</p>
<!-- more -->
<h2 id="is-与-is-not">is 与 is  not</h2>
<table>
<thead>
<tr>
<th>运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td style="text-align:center">is是判断两个标识符是不是引用同一个对象</td>
<td style="text-align:right">x is y，类似id(x)==id(y)</td>
</tr>
<tr>
<td>is not</td>
<td style="text-align:center">is not是判断两个标识符是不是引用不同对象</td>
<td style="text-align:right">x is not y，类似id(x)!=id(y)</td>
</tr>
</tbody>
</table>
<h2 id="is与区别">is与==区别：</h2>
<p>is用于判断两个变量引用对象是否为同一个<br>
==用于判断引用变量的值是否相等<br>
判断None与False用is</p>
<pre><code class="language-python">    if new_str is None:
        return False
    if new_str is False:
        return False
</code></pre>
<h1 id="输入列表">输入列表</h1>
<pre><code class="language-python">
'''
编写程序，输入一个包含若干整数的列表，输出列表中的最大值。例如，输入[1, 2, 3,4, 5, 888]输出888。
输入[1, 2, 3,4, 5, 888]
eval就会把它从字符串转换为列表。
'''
input_list = eval(input(&quot;请输入一个列表&quot;))

print(max(input_list))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python安装教程]]></title>
        <id>https://blog.youis.top/post/python-an-zhuang-jiao-cheng/</id>
        <link href="https://blog.youis.top/post/python-an-zhuang-jiao-cheng/">
        </link>
        <updated>2020-03-25T05:38:51.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="1-下载python解释器并安装">1. 下载python解释器并安装</h1>
<p>官方地址: <a href="https://www.python.org/downloads/release/python-377/">点击下载</a><br>
🤡🤡🤡</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="1-下载python解释器并安装">1. 下载python解释器并安装</h1>
<p>官方地址: <a href="https://www.python.org/downloads/release/python-377/">点击下载</a><br>
🤡🤡🤡</p>
<!-- more -->
<p>查找对应版本，找到目标文件： <a href="https://www.python.org/ftp/python/3.7.7/python-3.7.7-amd64.exe">Windows x86-64 executable installer</a> 下载即可</p>
<figure data-type="image" tabindex="1"><img src="http://qiniu.youis.top/image-20200325121059112.png" alt="image-20200325121059112" loading="lazy"></figure>
<h1 id="2-安装解释器">2. 安装解释器</h1>
<p>(1)  点击.exe文件，注意：勾选添加到环境变量，然后点击（customize installation）自定义安装，<br>
<img src="http://qiniu.youis.top/image-20200325121124154.png" alt="image-20200325121124154" loading="lazy"></p>
<p>（2）进入如下界面，这是一些可选的项，全部默认勾选进行下一步<br>
<img src="http://qiniu.youis.top/image-20200325121131108.png" alt="image-20200325121131108" loading="lazy"></p>
<p>（3）选择安装路径，选择自己的安装路径</p>
<figure data-type="image" tabindex="2"><img src="http://qiniu.youis.top/image-20200325121145741.png" alt="image-20200325121145741" loading="lazy"></figure>
<p>（4）安装<br>
<img src="http://qiniu.youis.top/image-20200325121155998.png" alt="image-20200325121155998" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="http://qiniu.youis.top/image-20200325121203778.png" alt="image-20200325121203778" loading="lazy"></figure>
<pre><code>     测试是否安装成功，在dos控制台窗口输入python,pip命令。
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://qiniu.youis.top/image-20200325121246869.png" alt="image-20200325121246869" loading="lazy"></figure>
<h1 id="升级pip版本如果需要则使用">升级pip版本（如果需要则使用）</h1>
<figure data-type="image" tabindex="5"><img src="http://qiniu.youis.top/image-20200325121255095.png" alt="image-20200325121255095" loading="lazy"></figure>
<ol>
<li>单独下载pip并安装（如果python中已经存在，则不需要）</li>
</ol>
<figure data-type="image" tabindex="6"><img src="http://qiniu.youis.top/image-20200325121305672.png" alt="image-20200325121305672" loading="lazy"></figure>
<ol>
<li>下载链接</li>
</ol>
<p><a href="https://pypi.python.org/pypi/pip#downloads">https://pypi.python.org/pypi/pip#downloads</a></p>
<ol start="2">
<li>[解压]{.underline}</li>
</ol>
<figure data-type="image" tabindex="7"><img src="http://qiniu.youis.top/image-20200325121318107.png" alt="image-20200325121318107" loading="lazy"></figure>
<ol start="3">
<li>安装pip，默认安装在python的script目录下</li>
</ol>
<figure data-type="image" tabindex="8"><img src="http://qiniu.youis.top/image-20200325121333792.png" alt="image-20200325121333792" loading="lazy"></figure>
<ol start="4">
<li>配置pip环境变量，在window的环境变量path中</li>
</ol>
<figure data-type="image" tabindex="9"><img src="http://qiniu.youis.top/image-20200325121340959.png" alt="image-20200325121340959" loading="lazy"></figure>
<ol start="5">
<li>测试是否安装成功</li>
</ol>
<figure data-type="image" tabindex="10"><img src="http://qiniu.youis.top/image-20200325121348746.png" alt="image-20200325121348746" loading="lazy"></figure>
<h1 id="3-进行扩展库安装">3.  进行扩展库安装</h1>
<ol>
<li>查看已安装的模块</li>
</ol>
<figure data-type="image" tabindex="11"><img src="http://qiniu.youis.top/image-20200325121505990.png" alt="image-20200325121505990" loading="lazy"></figure>
<ol start="2">
<li>进行在线安装</li>
</ol>
<figure data-type="image" tabindex="12"><img src="http://qiniu.youis.top/image-20200325121513476.png" alt="image-20200325121513476" loading="lazy"></figure>
<p>也可以通过其他镜像下载：pip install -i http://pypi.douban.com/simple --trusted-host pypi.douban.com pandas</p>
<ol start="3">
<li>
<p>离线安装</p>
<ol>
<li>
<p>下载模块文件.whl</p>
<p>地址： <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>选择对应的whl文件下载：</p>
</li>
</ol>
</li>
</ol>
<figure data-type="image" tabindex="13"><img src="http://qiniu.youis.top/image-20200325121530859.png" alt="image-20200325121530859" loading="lazy"></figure>
<ol start="2">
<li>通过pip安装</li>
</ol>
<figure data-type="image" tabindex="14"><img src="http://qiniu.youis.top/image-20200325121538377.png" alt="image-20200325121538377" loading="lazy"></figure>
<ol start="4">
<li>卸载</li>
</ol>
<figure data-type="image" tabindex="15"><img src="http://qiniu.youis.top/image-20200325121545274.png" alt="image-20200325121545274" loading="lazy"></figure>
<ol start="4">
<li>
<p>下载并安装集成开发环境PyCharm或者Anaconda3</p>
<p>官方地址：<a href="https://www.jetbrains.com/pycharm/download/#section=windows">[https://www.jetbrains.com/pycharm/download/#section=windows]{.underline}</a></p>
</li>
</ol>
<figure data-type="image" tabindex="16"><img src="http://qiniu.youis.top/image-20200325121555613.png" alt="image-20200325121555613" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PicGo+Typora实现图片自动上传]]></title>
        <id>https://blog.youis.top/post/picgotypora-shi-xian-tu-pian-zi-dong-shang-chuan/</id>
        <link href="https://blog.youis.top/post/picgotypora-shi-xian-tu-pian-zi-dong-shang-chuan/">
        </link>
        <updated>2020-03-14T13:27:43.000Z</updated>
        <summary type="html"><![CDATA[<p>😁😁😁自建博客，图片自动上传图床，提高网站访问速度。</p>
]]></summary>
        <content type="html"><![CDATA[<p>😁😁😁自建博客，图片自动上传图床，提高网站访问速度。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="http://qiniu.youis.top/image-20200314211831488.png" alt="image-20200314211831488" loading="lazy"></figure>
<p>图床我用的七牛云。</p>
<figure data-type="image" tabindex="2"><img src="http://qiniu.youis.top/image-20200314212120529.png" alt="image-20200314212120529" loading="lazy"></figure>
<p>确认区域那里有一点坑，z0,z1,z2,z3表示七牛的四个存储区域。</p>
<p>进行一下的设置。</p>
<figure data-type="image" tabindex="3"><img src="http://qiniu.youis.top/image-20200314212420305.png" alt="image-20200314212420305" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="http://qiniu.youis.top/image-20200314212334602.png" alt="image-20200314212334602" loading="lazy"></figure>
<p>然后就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Anaconda 入门(一)]]></title>
        <id>https://blog.youis.top/post/anaconda-ru-men-yi/</id>
        <link href="https://blog.youis.top/post/anaconda-ru-men-yi/">
        </link>
        <updated>2020-03-12T10:09:19.000Z</updated>
        <summary type="html"><![CDATA[<p>Anaconda 是什么？<br>
Anaconda 是一个可用于科学计算的 Python 发行版，支持 Linux、Mac、Windows系统，内置了常用的科学计算包。它解决了官方 Python 的两大痛点。<br>
⚽️⚽️⚽️</p>
]]></summary>
        <content type="html"><![CDATA[<p>Anaconda 是什么？<br>
Anaconda 是一个可用于科学计算的 Python 发行版，支持 Linux、Mac、Windows系统，内置了常用的科学计算包。它解决了官方 Python 的两大痛点。<br>
⚽️⚽️⚽️</p>
<!-- more -->
<ul>
<li>第一：提供了包管理功能，Windows 平台安装第三方包经常失败的场景得以解决，</li>
<li>第二：提供环境管理的功能，功能类似 Virtualenv，解决了多版本Python并存、切换的问题。</li>
</ul>
<h1 id="下载-anaconda">下载 Anaconda</h1>
<p>直接在<a href="https://www.anaconda.com/distribution/">官网下载</a>安装包， 选择 Python3.6 的安装包进行下载，下载完成后直接安装，安装过程选择默认配置即可，大约需要1.8G的磁盘空间。<br>
我选择的是国内下载<br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学开源镜像网站</a><br>
<img src="http://qiniu.youis.top/20200312181813.png" alt="" loading="lazy"><br>
<img src="http://qiniu.youis.top/20200312181916.png" alt="" loading="lazy"><br>
下载以后安装就行。<br>
具体安装过程看这篇<a href="https://blog.csdn.net/xhbspark/article/details/89929458">博文</a></p>
<h1 id="conda-工具介绍">conda 工具介绍</h1>
<p>conda 是 Anaconda 下用于包管理和环境管理的工具，功能上类似 pip 和 vitualenv 的组合。安装成功后 conda 会默认加入到环境变量中，因此可直接在命令行窗口运行命令 conda</p>
<p>conda 的环境管理与 virtualenv 是基本上是类似的操作。</p>
<pre><code># 查看帮助
conda -h 
# 基于python3.6版本创建一个名字为python36的环境
conda create --name python36 python=3.6 
# 激活此环境
activate python36  
source activate python36 # linux/mac
# 再来检查python版本，显示是 3.6
python -V  
# 退出当前环境
deactivate python36 
# 删除该环境
conda remove -n python36 --all
# 或者 
conda env remove  -n python36

# 查看所以安装的环境
conda info -e
python36              *  D:\Programs\Anaconda3\envs\python36
root                     D:\Programs\Anaconda3
</code></pre>
<p>conda 的包管理功能可 pip 是一样的，当然你选择 pip 来安装包也是没问题的。</p>
<pre><code># 安装 matplotlib 
conda install matplotlib
# 查看已安装的包
conda list 
# 包更新
conda update matplotlib
# 删除包
conda remove matplotlib
</code></pre>
<p>在 conda 中 anything is a package。conda 本身可以看作是一个包，python 环境可以看作是一个包，anaconda 也可以看作是一个包，因此除了普通的第三方包支持更新之外，这3个包也支持。比如：</p>
<pre><code># 更新conda本身
conda update conda
# 更新anaconda 应用
conda update anaconda
# 更新python，假设当前python环境是3.6.1，而最新版本是3.6.2，那么就会升级到3.6.2
conda update python
</code></pre>
<h1 id="修改镜像地址">修改镜像地址</h1>
<h2 id="anaconda-换源">anaconda 换源</h2>
<p>Anaconda 的镜像地址默认在国外，用 conda 安装包的时候会很慢，目前可用的国内镜像源地址有清华大学的。修改 ~/.condarc (Linux/Mac) 或 C:\Users\当前用户名.condarc (Windows) 配置：</p>
<pre><code>channels:
 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
 - defaults
show_channel_urls: true
</code></pre>
<h2 id="pip换源">pip换源</h2>
<p>如果使用conda安装包的时候还是很慢，那么可以考虑使用pip来安装，同样把 pip 的镜像源地址也改成国内的，我用的是阿里云。修改 ~/.pip/pip.conf (Linux/Mac) 或 C:\Users\当前用户名\pip\pip.ini (Windows) 配置：</p>
<pre><code>[global]
timeout = 6000
index-url =http://mirrors.aliyun.com/pypi/simple/
trusted-host= mirrors.aliyun.com
</code></pre>
<h1 id="遇到的问题">遇到的问题</h1>
<p>##命令行打开提示UnicodeDecodeError: 'gbk' codec can't decode byte 0x9a in position 17: illegal multibyte sequence<br>
<img src="http://qiniu.youis.top/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20200323151719.png" alt="" loading="lazy"><br>
根据File<br>
&quot;D:\soft\anaconda3\lib\site-packages\pyreadline\lineeditor\history.py&quot;, line 82, in read_history_file for line in open(filename, 'r'):<br>
在原有的open函数里 新增了一个参数选项encoding='utf-8'<br>
就可以解决了<br>
把(filename, 'r' )修改为(filename, 'r',encoding='utf-8' )</p>
<h2 id="弹出警告">弹出警告</h2>
<p>This Python interpreter is in a conda environment, but the environment has not been activated.  Libraries may fail to load.  To activate this environment please see https://conda.io/activation<br>
解决方式</p>
<p>使用终端或Anaconda提示符执行以下步骤。</p>
<p>默认情况下，活动环境---您当前使用的环境---显示在命令提示符开头的括号（）或括号[]中：(myenv) $<br>
　　如果您没有看到这个，请运行：conda info --envs<br>
　　在显示的环境列表中，当前环境以星号（*）突出显示</p>
]]></content>
    </entry>
</feed>
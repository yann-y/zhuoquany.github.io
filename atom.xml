<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.youis.top</id>
    <title>Eden的博客</title>
    <updated>2020-05-01T06:50:13.483Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.youis.top"/>
    <link rel="self" href="https://blog.youis.top/atom.xml"/>
    <subtitle>浮生若梦，人生几何</subtitle>
    <logo>https://blog.youis.top/images/avatar.png</logo>
    <icon>https://blog.youis.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Eden的博客</rights>
    <entry>
        <title type="html"><![CDATA[谁没交作业，让我康康]]></title>
        <id>https://blog.youis.top/post/0TQcnCohv/</id>
        <link href="https://blog.youis.top/post/0TQcnCohv/">
        </link>
        <updated>2020-05-01T02:12:17.000Z</updated>
        <summary type="html"><![CDATA[<p>收作业不清楚谁没教，一个一个的数，太麻烦。<br>
😏😏😏<br>
写一个程序搞定他。</p>
]]></summary>
        <content type="html"><![CDATA[<p>收作业不清楚谁没教，一个一个的数，太麻烦。<br>
😏😏😏<br>
写一个程序搞定他。</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/3/26 17:56
@file: homeWork.py
@desc:      作业查收，扫描文件夹，利用正则表达式，匹配唯一id学号
        然后遍历名单，获取未交作业人员
&quot;&quot;&quot;
import os
import pandas as pd
import re
import threading
import zipfile
import time


def listdir(path, list_name):
    &quot;&quot;&quot;
    @param path:  str
    @param list_name: list
    &quot;&quot;&quot;
    for file in os.listdir(path):
        file_path = os.path.join(path, file)
        if os.path.isdir(file_path):
            # 判断对象是否是一个目录
            # 修改建议，目录直接压缩，判断压缩后的文件是否已经存在。？？？？
            listdir(file_path, list_name)
        else:
            # print(re.findall(r&quot;\d+\.?\d*&quot;, file_path))
            # file_path = re.findall(r&quot;\d+\.?\d*&quot;, file_path)[0]
            file_path = re.findall(r&quot;\d+&quot;, file_path)[0]  # /d匹配数字，+匹配多次
            if len(file_path) != 10:  # 如果学号不是10位数字，代表学号错误。
                print(file_path + &quot;是一个错误的学号&quot;)
            # print(file)
            # print(file_path)
            list_name.add(int(file_path))


def reprint():
    set_len = len(unpaid)
    if set_len &gt; 0:
        print(&quot;还有%d名同学没有教作业！！&quot; % set_len)
        for index in unpaid:
            print(index, df[index])
    else:
        print(&quot;作业已经交齐了。&quot;)


if __name__ == '__main__':
    work_path = r&quot;E:\study\Linux高级运维\作业\Linux高级运维_shell练习_第三次作业&quot;
    work_list = set()
    t = threading.Thread(target=listdir(work_path, work_list))
    t.start()
    # listdir(work_path, work_list)
    excel_path = r&quot;RenYuanMingDan.xlsx&quot;  # 人员名单
    df = pd.read_excel(excel_path, encoding=&quot;utf-8&quot;, usecols=[u&quot;姓名&quot;, u&quot;学号&quot;])
    df = df.set_index([u&quot;学号&quot;])
    df = df.to_dict()
    df = df[u&quot;姓名&quot;]
    unpaid = set(df) - work_list
    reprint()

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python案列(电影推荐)]]></title>
        <id>https://blog.youis.top/post/3mEbBUOoi/</id>
        <link href="https://blog.youis.top/post/3mEbBUOoi/">
        </link>
        <updated>2020-04-27T07:42:25.000Z</updated>
        <summary type="html"><![CDATA[<p>这个是python课的一个小案列，不涉及大数据推荐等等。<br>
只是一个简单的集合应用</p>
<h1 id="问题描述">问题描述</h1>
<p>假设已有大量用户对若干电影的评分数据，现有某用户，也看过一些电影并进行过评分，要求根据已有打分数据为该用户进行推荐。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个是python课的一个小案列，不涉及大数据推荐等等。<br>
只是一个简单的集合应用</p>
<h1 id="问题描述">问题描述</h1>
<p>假设已有大量用户对若干电影的评分数据，现有某用户，也看过一些电影并进行过评分，要求根据已有打分数据为该用户进行推荐。</p>
<!-- more -->
<h1 id="基本思路">基本思路</h1>
<p>基本思路：用基于用户的协同过滤算法，也就是根据用户喜好来确定与当前用户最相似的用户，然后再根据最相似用户的喜好为当前用户进行推荐。本例采用字典来存放打分数据，格式为{用户1:{电影名称1:打分1, 电影名称2:打分2,...}, 用户2:{...}}，首先在已有数据中查找与当前用户共同打分电影（使用集合的交集运算）数量最多的用户，如果有多个这样的用户就再从中选择打分最接近（打分的差距最小）的用户。代码中使用到了random模块中的randrange()函数，用来生成指定范围内的一个随机数。<br>
效果图如下：<br>
<img src="https://image.youis.top/20200427160605.png" alt="" loading="lazy"></p>
<h1 id="解法一">解法一</h1>
<pre><code class="language-python">from random import randrange

# 历史电影打分数据，一共10个用户，每个用户对3到9个电影进行评分
# 每个电影的评分最低1分最高5分，这里是字典推导式和集合推导式的用法
data = {'user' + str(i): {'film' + str(randrange(1, 15)): randrange(1, 6)
                          for j in range(randrange(3, 10))}
        for i in range(10)}
# 模拟当前用户打分数据，为5部随机电影打分
user = {'film' + str(randrange(1, 15)): randrange(1, 6) for i in range(5)}
# 最相似的用户及其对电影打分情况
# 两个用户共同打分的电影最多
# 并且所有电影打分差值的平方和最小
f = lambda item: (-len(item[1].keys() &amp; user),
                  sum(((item[1].get(film) - user.get(film)) ** 2
                       for film in user.keys() &amp; item[1].keys())))
similarUser, films = min(data.items(), key=f)
# 在输出结果中，第一列表示两个人共同打分的电影的数量
# 第二列表示二人打分之间的相似度，数字越小表示越相似
# 然后是该用户对电影的打分数据
print('known data'.center(50, '='))
for item in data.items():
    print(len(item[1].keys() &amp; user.keys()),
          sum(((item[1].get(film) - user.get(film)) ** 2
               for film in user.keys() &amp; item[1].keys())),
          item,
          sep=':')
print('current user'.center(50, '='))
print(user)
print('most similar user and his films'.center(50, '='))
print(similarUser, films, sep=':')
print('recommended film'.center(50, '='))
# 在当前用户没看过的电影中选择打分最高的进行推荐
print(max(films.keys() - user.keys(), key=lambda film: films[film]))
</code></pre>
<h1 id="解法二">解法二</h1>
<pre><code class="language-python">from random import randrange


def diff_value(use, fil):
    score = 0
    for filmName in fil:
        # 计算两个用户的打分差距
        score += abs(data[use][filmName] - user[filmName])
    return score


# 模拟获取数据
data = {'user' + str(i): {'film' + str(randrange(1, 15)): randrange(1, 6) for j in range(randrange(3, 10))}
        for i in range(1, 11)}
print(&quot;=====模拟数据=====&quot;)
print(data)
# 模拟用户喜好
user = {'film' + str(randrange(1, 15)): randrange(1, 6) for j in range(randrange(3, 10))}
print(&quot;=====模拟当前用户喜好=====&quot;)
print(user)
film_len = 0  # 共同打分的数目
film_user = &quot;&quot;  # 最接近的那个用户
film_score = 0  # 记录分数差距
for key, value in data.items():
    film = set(value) &amp; set(user)  # 共同打分的电影
    # print(key, film)
    # 共同电影打分数目相同，则比较分数。
    if len(film) == film_len:
        if diff_value(key, film) &lt; film_score:
            film_len = len(film)
            film_user = key
            film_score = diff_value(key, film)
    if len(film) &gt; film_len:
        film_len = len(film)
        film_user = key
        film_score = diff_value(key, film)
print(&quot;=====最相似的用户和他的电影====&quot;)
print(film_user, data[film_user])
print(&quot;=====推荐的电影如下：======&quot;)


def max_score(film):
    return data[film_user][film]


# 推荐评分最高的电影
print(max(set(data[film_user]) - set(user), key=max_score))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gradle安装]]></title>
        <id>https://blog.youis.top/post/7b8Oe4egB/</id>
        <link href="https://blog.youis.top/post/7b8Oe4egB/">
        </link>
        <updated>2020-04-26T08:15:22.000Z</updated>
        <summary type="html"><![CDATA[<p>Gradle + eclipse 输入helloworld<br>
确保JDK安装成功。<br>
java 版本java1.8</p>
<h1 id="安装步骤">安装步骤</h1>
]]></summary>
        <content type="html"><![CDATA[<p>Gradle + eclipse 输入helloworld<br>
确保JDK安装成功。<br>
java 版本java1.8</p>
<h1 id="安装步骤">安装步骤</h1>
<!-- more -->
<p>Gradle(v4.10.3)下载地址 👉👉👉<a href="https://downloads.gradle-dn.com/distributions/gradle-4.10.3-all.zip">点击下载</a><br>
解压压缩包。<br>
右键此电脑👉-&gt;点击属性。<br>
按照图片添加环境变量<br>
<img src="https://image.youis.top/20200426162119.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426162405.png" alt="" loading="lazy"><br>
检查是否安装完成<br>
<img src="https://image.youis.top/20200426162453.png" alt="" loading="lazy"><br>
启动eclipse,点击window菜单，选择Preferences-&gt;Gradle设置Gradle位置<br>
<img src="https://image.youis.top/20200426162614.png" alt="" loading="lazy"><br>
1、创建Gradle项目<br>
方式1：<a href="https://start.spring.io/">https://start.spring.io/</a>用网站提供的生成<br>
<img src="https://image.youis.top/20200426162854.png" alt="" loading="lazy"><br>
eclipse 操作File-&gt;import-&gt;Gradle<br>
<img src="https://image.youis.top/20200426162940.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426162954.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426163004.png" alt="" loading="lazy"><br>
等待构建完成。<br>
<img src="https://image.youis.top/20200426163357.png" alt="" loading="lazy"><br>
然后点击运行。<br>
<img src="https://image.youis.top/5HL%60RTSLLQ1XKI4A%6094%5D%25SM.png" alt="" loading="lazy"></p>
<h1 id="报错处理">报错处理</h1>
<p>若中途报java错误，把jdk/lib/tools.jar复制一份到jre/lib里面</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker安装kafka]]></title>
        <id>https://blog.youis.top/post/NKkoP0wN4/</id>
        <link href="https://blog.youis.top/post/NKkoP0wN4/">
        </link>
        <updated>2020-04-25T08:21:56.000Z</updated>
        <summary type="html"><![CDATA[<p>docker妈耶，真香😁😁😁😁</p>
<h1 id="安装zookeeper">安装zookeeper</h1>
<p>kafka需要zookeeper管理，所以需要先安装zookeeper。<br>
下载zookeeper镜像<br>
$ docker pull zookeeper</p>
]]></summary>
        <content type="html"><![CDATA[<p>docker妈耶，真香😁😁😁😁</p>
<h1 id="安装zookeeper">安装zookeeper</h1>
<p>kafka需要zookeeper管理，所以需要先安装zookeeper。<br>
下载zookeeper镜像<br>
$ docker pull zookeeper</p>
<!-- more -->
<h2 id="启动镜像生成容器">启动镜像生成容器</h2>
<pre><code class="language-shell">docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2  --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper
</code></pre>
<h1 id="下载kafka镜像">下载kafka镜像</h1>
<pre><code class="language-shell">docker pull wurstmeister/kafka
</code></pre>
<p>4、启动kafka镜像生成容器</p>
<pre><code class="language-shell">docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.16.0.13:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.0.13:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka
</code></pre>
<p>参数说明：<br>
-e KAFKA_BROKER_ID=0  在kafka集群中，每个kafka都有一个BROKER_ID来区分自己</p>
<p>-e KAFKA_ZOOKEEPER_CONNECT=172.16.0.13:2181/kafka 配置zookeeper管理kafka的路径172.16.0.13:2181/kafka</p>
<p>-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.0.13:9092  把kafka的地址端口注册给zookeeper，如果是远程访问要改成外网IP,类如Java程序访问出现无法连接。</p>
<p>-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 配置kafka的监听端口</p>
<p>-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间</p>
<p>5、验证kafka是否可以使用</p>
<p>5.1、进入容器<br>
$ docker exec -it kafka bash</p>
<p>5.2、进入 /opt/kafka_2.12-2.3.0/bin/ 目录下<br>
$ cd /opt/kafka_2.12-2.3.0/bin/</p>
<p>5.3、运行kafka生产者发送消息<br>
$ ./kafka-console-producer.sh --broker-list localhost:9092 --topic sun</p>
<p>发送消息</p>
<pre><code>{&quot;datas&quot;:[{&quot;channel&quot;:&quot;&quot;,&quot;metric&quot;:&quot;temperature&quot;,&quot;producer&quot;:&quot;ijinus&quot;,&quot;sn&quot;:&quot;IJA0101-00002245&quot;,&quot;time&quot;:&quot;1543207156000&quot;,&quot;value&quot;:&quot;80&quot;}],&quot;ver&quot;:&quot;1.0&quot;}
</code></pre>
<p>5.4、运行kafka消费者接收消息<br>
$ ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sun --from-beginning</p>
<p>👉👉<a href="https://www.cnblogs.com/linjiqin/p/11891776.html">参考文章</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[又拍云使用]]></title>
        <id>https://blog.youis.top/post/iobZKkOLk/</id>
        <link href="https://blog.youis.top/post/iobZKkOLk/">
        </link>
        <updated>2020-04-24T06:32:56.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。😒😒😒</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。😒😒😒</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://image.youis.top/20200424142140.png" alt="" loading="lazy"></figure>
<p>香不香，15G的流量。还可以https 😍😍😍</p>
<figure data-type="image" tabindex="2"><img src="https://image.youis.top/20200424142927.png" alt="" loading="lazy"></figure>
<p>有一点就是，添加logo的时候，是点击图片，就可以访问官网。</p>
<p>参考代码：</p>
<pre><code class="language-html">&lt;a href=&quot;https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral&quot;&gt;&lt;img src=&quot;https://www.z4a.net/images/2020/04/20/_logo5.png&quot; alt=&quot;_logo5.png&quot; border=&quot;0&quot; width=&quot;100&quot; height=&quot;20&quot; /&gt;&lt;/a&gt;
</code></pre>
<h1 id="如何开启https">如何开启HTTPS</h1>
<p>创建服务后，点击https，点击管理。添加证书即可，在又拍云购买的免费证书，需要几分钟认证。</p>
<figure data-type="image" tabindex="3"><img src="https://image.youis.top/20200424142517.png" alt="" loading="lazy"></figure>
<p>其他使用还是和七牛云差不多的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第四次作业]]></title>
        <id>https://blog.youis.top/post/sRdAP2jaU/</id>
        <link href="https://blog.youis.top/post/sRdAP2jaU/">
        </link>
        <updated>2020-04-22T01:54:31.000Z</updated>
        <summary type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
]]></summary>
        <content type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
<!-- more -->
<p>1、首先生成包含1000个随机字符的字符串，然后统计每个字符的出现次数。<br>
参考string字符串模块的元组：</p>
<pre><code>import string
import random

x = string.ascii_letters + string.digits + string.punctuation
# print(x)
y = [random.choice(x) for i in range(1000)]  # 生成包含1000个随机字符的字符串
# print(y)
dic = dict()  # 使用字典保存每个字符出现次数
for ch in y:
    dic[ch] = dic.get(ch, 0) + 1  # d.get(ch,0) 返回ch出现的次数，若没有返回0
print(dic)
# nums = 0
# for values in dic.values():
#     nums += values
# print(nums)
</code></pre>
<p>2、写代码：有如下字典<br>
按照要求实现每一个功能</p>
<pre><code>dic = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}

# 1、请循环遍历出所有的key
for key in dic:
    print(key)
# 2、请循环遍历出所有的value
for value in dic.values():
    print(value)
# 3、请循环遍历出所有的key和value
for key, value in dic.items():
    print(key, value)
# 4、请在字典中增加一个键值对,&quot;k4&quot;:&quot;v4&quot;，输出添加后的字典
dic[&quot;k4&quot;] = &quot;v4&quot;
print(dic)
# 5、请删除字典中键值对&quot;k1&quot;:&quot;v1&quot;,并输出删除后的结果
dic.pop(&quot;k1&quot;)
print(dic)
# 6、请删除字典中键&quot;k5&quot;对应的键值对，如果字典中不存在键&quot;k5&quot;,则不报错，返回None
print(dic.pop(&quot;k5&quot;, None))
# 7、请获取字典中&quot;k2&quot;对应的值
print(dic[&quot;k2&quot;])
# 8、请获取字典中&quot;k6&quot;对应的值,如果不存在，则不报错，并且让其返回None。
print(dic.get(&quot;k6&quot;))
# 9、现有dict2 = {&quot;k1&quot;:&quot;v11&quot;,&quot;a&quot;:&quot;b&quot;},通过一行操作使dict2 = {&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;,&quot;k3&quot;:&quot;v3&quot;,&quot;a&quot;:&quot;b&quot;}
dict1 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}
dict2 = {&quot;k1&quot;: &quot;v11&quot;, &quot;a&quot;: &quot;b&quot;}
dict2.update(dict1)
print(dict2)
</code></pre>
<p>3、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能</p>
<pre><code># 10、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能
lis = [[&quot;k&quot;, [&quot;qwe&quot;, 20, {&quot;k1&quot;: [&quot;tt&quot;, 3, &quot;1&quot;]}, 89], &quot;ab&quot;]]
# 10.1、将列表中的字符串“tt”变成字符串&quot;TT&quot;(用两种方法)
#  方法一：
lis[0][1][2][&quot;k1&quot;][0] = &quot;TT&quot;
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[0] = &quot;TT&quot;
print(lis)
# 10.2、将列表中的字符串&quot;1&quot;变成数字101(用两种方法)
lis[0][1][2][&quot;k1&quot;][2] = 101
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[2] = 101
print(lis)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python爬虫抓包工具]]></title>
        <id>https://blog.youis.top/post/iumJPhy8A/</id>
        <link href="https://blog.youis.top/post/iumJPhy8A/">
        </link>
        <updated>2020-04-21T06:19:52.000Z</updated>
        <summary type="html"><![CDATA[<p>爬虫的基本原理就是模拟客户端（可以是浏览器，也有可能是APP）向远程服务器发送 HTTP 请求，我们需要知道目标服务器的 HOST、URI、请求方法、请求参数、请求头、请求体。Web 网站通过 Chrome 浏览器可以找到这些信息。但是对于 APP 爬虫，就显得有些束手无策。这时候必须借用一些抓包工具来辅助我们分析APP背后的秘密。</p>
]]></summary>
        <content type="html"><![CDATA[<p>爬虫的基本原理就是模拟客户端（可以是浏览器，也有可能是APP）向远程服务器发送 HTTP 请求，我们需要知道目标服务器的 HOST、URI、请求方法、请求参数、请求头、请求体。Web 网站通过 Chrome 浏览器可以找到这些信息。但是对于 APP 爬虫，就显得有些束手无策。这时候必须借用一些抓包工具来辅助我们分析APP背后的秘密。</p>
<!-- more -->
<p>今天推荐4个HTTP代理工具通过抓包分析，帮助你还原APP背后的每个请求。</p>
<h1 id="fiddler">Fiddler</h1>
<p>Fiddler 是 Windows 平台最好用的可视化抓包工具，也是大家最熟知的 HTTP 代理工具，功能非常强大，除了可以清晰的了解每个请求与响应之外，还可以进行断点设置，修改请求数据、拦截响应内容。</p>
<p>此外，还可以自定义规则，通过修改脚本，加入自己的特殊处理，不过因为它是 C# 编写的，如果你要写复杂的脚本，需要懂C#。</p>
<p>过滤器功能使得你可以通过正则表达式规则将你关心的请求显示出来，如果你只需要抓特定网站的数据，这个功能就显得非常有用，可以去除很多干扰信息。</p>
<h1 id="charles">Charles</h1>
<p>Charles 是 macOS 平台下最好用的抓包分析工具之一，同样提供GUI界面，界面简洁，基本功能包括HTTP、HTTPS 请求抓包，支持请求参数的修改，最新的 Charles 4 还支持 HTTP/2。当然，也同时支持Windows 和 Linux， 不过这款工具是要收费的，免费试用 30 天，试用期过后功能受限。</p>
<h1 id="anyproxy">AnyProxy</h1>
<p>AnyProxy 是 阿里巴巴开源的 HTTP 抓包工具，基于 NodeJS 实现，优点是支持二次开发，可自定义请求处理逻辑，如果你会写JS的话，同时需要做一些自定义的处理，那么AnyProxy 是非常适合的。支持 HTTPS，提供了GUI界面。 GitHub地址：https://github.com/alibaba/anyproxy</p>
<h1 id="mitmproxy">mitmproxy</h1>
<p>mitmproxy 是一款基于 Python，支持 SSL 的抓包工具，用 Python 写爬虫的一定会很喜欢，因为他不仅是跨平台的，而且提供的是命令行交互模式，很有极（zhuang）客（bi）感。mitmproxy 包含 3 款工具：</p>
<p>mitmproxy: 带交互的终端界面<br>
mitmdump: mitmproxy 的命令行版本，类似于 tcpdump<br>
libmproxy: 用于 mitmproxy/mitmdump 的库<br>
GitHub 地址：https://github.com/mitmproxy/mitmproxy</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第三次作业]]></title>
        <id>https://blog.youis.top/post/python-di-san-ci-zuo-ye/</id>
        <link href="https://blog.youis.top/post/python-di-san-ci-zuo-ye/">
        </link>
        <updated>2020-04-18T08:59:47.000Z</updated>
        <summary type="html"><![CDATA[<p>1.现有商品列表如下：</p>
<p>products =   [[&quot;iphone&quot;,6888],[&quot;MacPro&quot;,14800],[&quot;小米6&quot;,2499],[&quot;Coffee&quot;,31],[&quot;Book&quot;,60],[&quot;Nike&quot;,699]]，</p>
]]></summary>
        <content type="html"><![CDATA[<p>1.现有商品列表如下：</p>
<p>products =   [[&quot;iphone&quot;,6888],[&quot;MacPro&quot;,14800],[&quot;小米6&quot;,2499],[&quot;Coffee&quot;,31],[&quot;Book&quot;,60],[&quot;Nike&quot;,699]]，</p>
<!-- more -->
<p>需打印出以下格式：<br>
------商品列表------<br>
0 iphone 6888<br>
1 MacPro 14800<br>
2 小米6 2499<br>
3 Coffee 31<br>
4 Book 60<br>
5 Nike 699、</p>
<pre><code class="language-python"># encoding: utf-8
products = [[&quot;iphone&quot;, 6888], [&quot;MacPro&quot;, 14800], [&quot;小米6&quot;, 2499], [&quot;Coffee&quot;, 31], [&quot;Book&quot;, 60], [&quot;Nike&quot;, 699]]
print(&quot;------商品列表------&quot;)
for index, info in enumerate(products):
    print(index, info[0], info[1])
</code></pre>
<ol start="2">
<li>python 用户在键盘上输入一个自然数n，然后在区间[1, 5n]上随机生成n个不重复的自然数，输出这些自然数， 然后继续编写代码对这些自然数进行处理，只保留所有偶数，并输出这些偶数</li>
</ol>
<pre><code class="language-python">import random
n = int(input(&quot;请输入一个自然数N: &quot;))
numList = random.sample(range(1, 5 * n + 1), n)
print(numList)
outList = list(filter(lambda x: (x + 1) % 2, numList))  # （x+1）奇偶互换
print(outList)

</code></pre>
<ol start="3">
<li>编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。</li>
</ol>
<pre><code class="language-python">import random
numList = [random.randint(0, 9) for i in range(20)]
print(numList)
print(sorted(numList[:10]) + sorted(numList[10:], reverse=True))
</code></pre>
<ol start="4">
<li>编写程序，让用户在键盘上输入一个包含若干整数的列表，输出翻转后的列表。</li>
</ol>
<pre><code class="language-python">inputList = eval(input(&quot;请输入一个列表&quot;))
print(inputList[::-1])
</code></pre>
<p>元组练习：（选作）<br>
5.	写代码，有如下元祖，按照要求实现每一个功能<br>
print(&quot;----------------------------------------------&quot;)  tu = (&quot;alex&quot;, &quot;eric&quot;, &quot;Witharush&quot;)</p>
<pre><code class="language-python">
print(&quot;----------------------------------------------&quot;)
tu = (&quot;alex&quot;, &quot;eric&quot;, &quot;Witharush&quot;)
# a.计算元祖长度并输出
print(&quot;元组长度  %d&quot; % len(tu))
# b.获取元祖的第二个元素，并输出 print(tu[1])
print(tu[1])
# c.获取元祖的第 1-2 个元素，并输出
print(tu[0:2])
# d.请使用for输出元祖的元素
for i in tu:
    print(i)
# e.请使用for，len，range输出元素的索引
for j in range(len(tu)):
    print(j)
# f.请使用enumerate输出元祖元素和序号（序号从10开始）
for i, v in enumerate(tu, 10):
    print(i, v)
</code></pre>
<p>扩展练习：<br>
有以下列表<br>
nums = [2, 7, 11, 15, 1, 8]<br>
请找到列表中任意相加等于9的元素集合，如：[(2, 7), (1, 8)]</p>
<pre><code class="language-python">nums = [2, 7, 11, 15, 1, 8]
outNums = [(nums[i], nums[j]) for i in range(len(nums))
           for j in range(i + 1, len(nums))
           if nums[i] + nums[j] == 9]
print(outNums)

# 第二种解法
nums = [2, 7, 11, 15, 2, 1, 8]
nums_set = list(set(nums))  # 转集合的目的是为了去重
outNums = [(i, j) for index, i in enumerate(nums_set)
           for j in nums_set[index+1:]
           if i + j == 9]
print(outNums)  # [(1, 8), (2, 7)]
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第二次作业]]></title>
        <id>https://blog.youis.top/post/python-di-er-ci-zuo-ye/</id>
        <link href="https://blog.youis.top/post/python-di-er-ci-zuo-ye/">
        </link>
        <updated>2020-04-18T07:55:08.000Z</updated>
        <summary type="html"><![CDATA[<p>顺便吐槽一下，我们老师。<br>
每节课都有作业。。。。<br>
🙃🙃🙃🙃</p>
]]></summary>
        <content type="html"><![CDATA[<p>顺便吐槽一下，我们老师。<br>
每节课都有作业。。。。<br>
🙃🙃🙃🙃</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/4/14 14:38
@file: problem.py
@desc: 
&quot;&quot;&quot;

# 创建一个空列表，命名为names，往里面添加 Lihua、Rain、Jack、Xiuxiu、Peiqi和Black元素。
names = list()
names.append(&quot;Lihua&quot;)
names.append(&quot;Rain&quot;)
names.append(&quot;Jack&quot;)
names.append(&quot;Xiuxiu&quot;)
names.append(&quot;Peiqi&quot;)
names.append(&quot;Black&quot;)
# Names=[]
# Names.append(“”)
# 往1中的names列表里Black前面插入一个Blue。
names.insert(-1, &quot;Blue&quot;)
# 把names列表中Xiuxiu的名字改成中文。
names[names.index(&quot;Xiuxiu&quot;)] = &quot;秀秀&quot;
# 往names列表中Rain后面插入一个子列表[&quot;oldboy&quot;,&quot;oldgirl&quot;]。
names.insert(names.index(&quot;Rain&quot;)+1, [&quot;oldboy&quot;, &quot;oldgirl&quot;])
print(names)  # 验证
# 返回names列表中Peiqi的索引值（下标）
print(names.index(&quot;Peiqi&quot;))
# 创建新列表[1,2,3,4,2,5,6,2,]，合并到names列表中。
numbers = [1, 2, 3, 4, 2, 5, 6, 2]
names.extend(numbers)  # extend()方法表示合并
print(names)
# 取出names列表中索引4-7的元素。
print(names[4:8])
# 取出names列表中索引2-10的元素，步长为2
print(names[2:11:2])
# 取出names列表中最后3个元素。
print(names[-3:])  # [-3:]表示取值范围为从列表的倒数第三个到末尾
# 循环names列表，打印每个元素的索引值和元素。
for index, i in enumerate(names):
    print(index, i)
    # 循环names列表，打印每个元素的索引值和元素，当索引值为偶数时，把对应的元素改成-1。
for index, i in enumerate(names):
    if index % 2 == 0:
        names[index] = -1
        # print(index, i)
print(names)
# names列表里有3个2，请返回第二个2的索引值，动态找

print(names.index(2, names.index(2) + 1),)
</code></pre>
<p>好了，不多说了。我要去写第三次作业了。😘😘😘</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python十一道练习]]></title>
        <id>https://blog.youis.top/post/python-shi-yi-dao-lian-xi/</id>
        <link href="https://blog.youis.top/post/python-shi-yi-dao-lian-xi/">
        </link>
        <updated>2020-04-13T07:32:23.000Z</updated>
        <summary type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
]]></summary>
        <content type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
<!-- more -->
<p>1.编写程序，输入一个自然数字符串，然后输出各位数字之和。例如，输入字符串1234，输出10.</p>
<pre><code class="language-python">from functools import reduce

input_str = input(&quot;请输入一个字符串&quot;)

print(reduce(lambda x, y: int(x) + int(y), input_str))
</code></pre>
<p>2.编写程序，输入一个字符串，输出翻转（首尾交替）后的字符串。例如，输入字符串12345，输出54321.</p>
<pre><code class="language-python">input_str = input(&quot;请输入一个字符串&quot;)
input_str = input_str[::-1]
print(input_str)
</code></pre>
<p>3.编写程序，输入一个包含若干整数的列表，输出列表中的最大值。例如，输入[1，2，3，4，5，888]，输出888.</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
print(max(input_list))
</code></pre>
<p>4.编写程序，输入一个包含若干整数的列表，把列表中所有整数转换为字符串，然后输出包含这些字符串的列表。例如，输入[1，2，3，4，5，888]，输出['1'，'2'，'3'，'4'，'5'，'888']。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

print(list(map(str, input_list)))

</code></pre>
<p>5.编写程序，输入一个包含若干任意数据的列表，输出该列表中等价于True的元素组成的列表。例如，输入[1，2，0，None，False，'a']，输出[1，2，'a']。</p>
<pre><code class="language-python">def fun(new_str):
    if new_str is None:
        return False
    if new_str is False:
        return False
    if new_str == 0:
        return False
    return True


input_list = eval(input(&quot;请输入一个列表&quot;))
OutList = list(filter(fun, input_list))
print(OutList)
</code></pre>
<p>6.编写程序，输入一个包含若干自然数的列表，输出这些自然数的平均值。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
out_int = reduce((lambda x, y: x + y), input_list)
print(&quot;%.3f&quot; % (out_int / len(input_list)))
</code></pre>
<p>7.编写程序，输入一个包含若干自然数的列表，输出这些自然数降序排列的新列表。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

new_list = sorted(input_list, reverse=True)
print(new_list)
</code></pre>
<p>8.编写程序，输入一个包含若干自然数的列表，输出一个新列表，新列表中每个元素为原列表中每个自然数的位数。例如，输入[1，888，99，23456]，输出为[1，3，2，5]。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = list(map(lambda x: len(str(x)), input_list))
print(out_list)
</code></pre>
<p>9.编写程序，输入一个包含若干实数的列表，输出其中绝对值最大的实数。例如，输入[-8，64，3.5，-89]，输出-89。</p>
<pre><code class="language-python">from functools import reduce


def fun(x, y):
    if abs(x) &gt; abs(y):
        return x
    else:
        return y


input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = reduce(fun, input_list)
print(out_list)
</code></pre>
<p>10.编写程序，输入一个包含若干整数的列表，输出这些整数的乘积。例如，输入[-2，3，4]，输出-24。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
output = reduce(lambda x, y: x * y, input_list)
print(output)
</code></pre>
<p>11.编写程序，输入两个包含着若干整数的等长列表，把这两个列表看作两个向量，输出这两个向量的内积。</p>
<pre><code class="language-python">from functools import reduce

li1 = eval(input('请输入第一个列表'))
li2 = eval(input('请输入第二个列表'))
print(list(reduce(lambda x, y: x * y, (li1, li2))))
</code></pre>
]]></content>
    </entry>
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://youis.top</id>
    <title>Eden的博客</title>
    <updated>2021-01-12T09:36:01.224Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://youis.top"/>
    <link rel="self" href="https://youis.top/atom.xml"/>
    <subtitle>浮生若梦，人生几何</subtitle>
    <logo>https://youis.top/images/avatar.png</logo>
    <icon>https://youis.top/favicon.ico</icon>
    <rights>All rights reserved 2021, Eden的博客</rights>
    <entry>
        <title type="html"><![CDATA[oracle SQL语句转换为mysql  语句]]></title>
        <id>https://youis.top/post/QsOATQYns/</id>
        <link href="https://youis.top/post/QsOATQYns/">
        </link>
        <updated>2021-01-11T03:11:58.000Z</updated>
        <summary type="html"><![CDATA[<p>实习期间遇到oracle转换SQL的情况。</p>
]]></summary>
        <content type="html"><![CDATA[<p>实习期间遇到oracle转换SQL的情况。</p>
<!-- more -->
<h2 id="oracle-decode转换">oracle decode转换</h2>
<p>例如orcale的这样的一个sql句子：</p>
<pre><code class="language-sql">select * from （表) where id in('4538862','4588585','4883586','4883582','4993555','4993421','4993464')
    order by decode(id  ,'4538862','0','4883585','1','4883586','2','4883582','3','4993555','4','4993421','5','4993464','6');
</code></pre>
<p>而mysql沒有decode这样的函数，则转为mysql的一样的语句，可以如下：</p>
<pre><code class="language-sql">select * from （表) where id in('4538862','4588585','4883586','4883582','4993555','4993421','4993464')
    order by field(id ,'4538862','4588585','4883586','4883582','4993555','4993421','4993464');
</code></pre>
<p>所以mysql有field()函数自定义排序，格式为field(value,str1,str2,str3,str4)。</p>
<h2 id="substr">substr</h2>
<p>oracle里面的substr和mysql不一样，oracle的是零开始算第一个，而mysql是1。<br>
SUBSTR(str,pos,len);从pos开始的位置，截取len个字符(空白也算字符)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytorch卷积一张图片]]></title>
        <id>https://youis.top/post/3xMFr7DRj/</id>
        <link href="https://youis.top/post/3xMFr7DRj/">
        </link>
        <updated>2020-10-21T02:04:04.000Z</updated>
        <summary type="html"><![CDATA[<p>2020年10月19日 赛虎实习记录<br>
搭建一个七层网络，卷积图片。<br>
💪💪</p>
]]></summary>
        <content type="html"><![CDATA[<p>2020年10月19日 赛虎实习记录<br>
搭建一个七层网络，卷积图片。<br>
💪💪</p>
<!-- more -->
<pre><code class="language-python">import torch
import torch.nn as nn

from PIL import Image
import torchvision.transforms as trs


class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()  # 调用父类的构造方法
        # 开始搭建网络层
        # 中间层
        self.layers = nn.Sequential(
            # 中间层第一层
            nn.Conv2d(in_channels=3, out_channels=16, kernel_size=3, stride=1, padding=0),
            nn.ReLU(),  # 激活函数：给网络层提供非线性能力
            nn.MaxPool2d(2, 2),  # 池化层：加速卷积，N,16,15,15
            #
            nn.Conv2d(16, 64, 3, 1),  # N, 64,13,13
            nn.ReLU(),
            #
            nn.Conv2d(64, 70, 3, 1),
            nn.ReLU(),
            #
            nn.Conv2d(70, 80, 3, 1),  # N,80,12,12
            nn.ReLU(),
            #
            nn.Conv2d(80, 128, 3, 1),
            nn.ReLU(),
            # 第六层
            nn.Conv2d(128, 80, 3, 1),
            nn.ReLU(),
            # 第七层
            nn.Conv2d(80, 128, 3, 1),
            nn.ReLU()
        )
        # 输出层，根据中间层最后的形状进行定义
        self.output_layer = nn.Sequential(
            # 线性层
            # nn.Linear(80 * 80 * 3, 10)
            nn.Linear(128 * 169 * 237, 10)  # （接收的特征数，输出结果数）
        )

    def forward(self, x):  # 前向计算
        h = self.layers(x)  # 中间层，卷积(NCHW)
        print(h.shape)  # 获取中间层最后的形状
        # 转换形状NCHW为NV
        h = h.reshape(-1, 128 * 169 * 237)  # 转换形状NCHW为NV
        h = self.output_layer(h)  # 输出层，线性(NV)
        return h


if __name__ == '__main__':
    net = Net()
    img = Image.open(&quot;pic.jpg&quot;)
    # 转化  image图片  为  tensor矩阵
    x = trs.ToTensor()(img)
    print(x.shape)  # 查看形状CHW
    x = x.reshape(1, 3, 365, 500)  # 变形为NCHW
    print(x.shape)
    y = net(x)
    print(y)
    print(y.shape)

    # x = torch.randn(1,3,32,32) #创建随机数据 1张3层的32*32的图片
    # y = net(x)
    # print(y.shape)
    # print(y)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python实现二维码]]></title>
        <id>https://youis.top/post/Kc4zbUSnd/</id>
        <link href="https://youis.top/post/Kc4zbUSnd/">
        </link>
        <updated>2020-10-16T06:20:39.000Z</updated>
        <summary type="html"><![CDATA[<p>实现二维码，<br>
四位二维码，前两位数字，后两位大写字母。<br>
😁😁😁效果如下：<br>
<img src="https://image.youis.top/test.jpg" alt="" loading="lazy"><br>
是不是很有哪味🤞🤞🤞</p>
]]></summary>
        <content type="html"><![CDATA[<p>实现二维码，<br>
四位二维码，前两位数字，后两位大写字母。<br>
😁😁😁效果如下：<br>
<img src="https://image.youis.top/test.jpg" alt="" loading="lazy"><br>
是不是很有哪味🤞🤞🤞</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/10/15 14:52
@file: test06.py
@desc: 
&quot;&quot;&quot;
from PIL import Image, ImageDraw, ImageFont
import random


# 生成验证码

# ASCII 字符的对应值
# 生成随机字母
def randomchar(x):
    if i &lt;= 1:  # 前两位是数字
        return chr(random.randint(48, 57))  # 随机生成数字
    else:  # 其他的是A~Z
        return chr(random.randint(65, 90))  # 随即生成A~Z
    # 数字0~9的字符对应48~57
    # 小写字母对应97~122


def randomcl1():
    return (random.randint(64, 255),
            random.randint(64, 255),
            random.randint(64, 255))


def randomcl2():
    return (random.randint(0, 127),
            random.randint(0, 127),
            random.randint(0, 127))


width = 240
height = 100

# 创建画板
img = Image.new(&quot;RGB&quot;, (width, height), (255, 255, 255))
# 创建画笔
draw = ImageDraw.Draw(img)
# 创建字体
font = ImageFont.truetype(&quot;arial.ttf&quot;, 60)

# 填充像素
for x in range(width):
    for y in range(height):
        draw.point((x, y), randomcl1())

# 生成验证码，填充颜色
for i in range(4):
    draw.text((60 * i, 15), randomchar(x), randomcl2(), font)
img.show()
img.save(&quot;test.jpg&quot;)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytorch测试demo]]></title>
        <id>https://youis.top/post/KXGXsI0Gv/</id>
        <link href="https://youis.top/post/KXGXsI0Gv/">
        </link>
        <updated>2020-10-16T02:09:50.000Z</updated>
        <summary type="html"><![CDATA[<p>pytorch一个简单的测试代码。<br>
手写数字识别<br>
😁😁😁😁</p>
]]></summary>
        <content type="html"><![CDATA[<p>pytorch一个简单的测试代码。<br>
手写数字识别<br>
😁😁😁😁</p>
<!-- more -->
<pre><code class="language-python"># coding: utf-8
import torch
import torch.nn as nn
import torchvision.datasets as dsets
import torchvision.transforms as transforms
from torch.autograd import Variable
import torch.utils.data as Data
import matplotlib.pyplot as plt

input_size = 784  # 输入大小
hidden_size = 500  # 第一层的神经元个数
num_classes = 10  # 类别个数
num_epochs = 5  # 迭代次数
batch_size = 100  # 每一批的数目
learning_rate = 0.001  # 学习率

train_dataset = dsets.MNIST(root='./data', train=True,
                            transform=transforms.ToTensor(), download=True)  # 加载数据集
test_dataset = dsets.MNIST(root='./data', train=False,
                           transform=transforms.ToTensor(), download=True)  # 加载测试集

train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=batch_size, shuffle=True)  # shuffle为True：在每个epoch重新排列数据
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=batch_size, shuffle=False)


# In[4]:


class Net(nn.Module):
    def __init__(self, input_size, hidden_size, num_classes):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(input_size, hidden_size)
        self.relu = nn.ReLU()
        self.fc2 = nn.Linear(hidden_size, num_classes)

    def forward(self, x):
        out = self.fc1(x)
        out = self.relu(out)
        out = self.fc2(out)

        return out


# In[5]:


net = Net(input_size, hidden_size, num_classes)  # 创建模型
criterion = nn.CrossEntropyLoss()  # 创建损失函数（用的交叉熵）
optimizer = torch.optim.Adam(net.parameters(), lr=learning_rate)  # 梯度下降

# In[6]:


for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        images = Variable(images.view(-1, 28 * 28))
        label = Variable(labels)

        optimizer.zero_grad()  # 将权重初始化为0
        outputs = net(images)
        loss = criterion(outputs, labels)
        loss.backward()

        optimizer.step()  # 更新权重

        if (i + 1) % 100 == 0:
            print('Epoch [%d/%d], Step [%d/%d],Loss:%.4f' % (epoch + 1, num_epochs, i + 1,
                                                             len(train_dataset) // batch_size, loss.item()))

# In[7]:


# 预测数据
correct = 0
total = 0
for images, labels in test_loader:
    images = Variable(images.view(-1, 28 * 28))
    outputs = net(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum()
print('Accuracy of the network on the 10000 test images:%d %%' % (100 * correct // total))

# In[8]:


plt.imshow(test_dataset.data[-25].numpy(), cmap='gray')
plt.title('%i ' % (predicted[-25]))

plt.show()

# In[9]:


# 储存模型
torch.save(net, 'model1.pkl')

# In[10]:


# 加载模型
model = torch.load('model1.pkl')

# In[11]:


# 预测数据
correct = 0
total = 0
for images, labels in test_loader:
    images = Variable(images.view(-1, 28 * 28))
    outputs = model(images)
    _, predicted = torch.max(outputs.data, 1)
    total += labels.size(0)
    correct += (predicted == labels).sum()
print('Accuracy of the network on the 10000 test images:%d %%' % (100 * torch.true_divide(correct, total)))

# In[12]:


torch.save(net.state_dict(), 'model2.pkl')
net.load_state_dict(torch.load('model2.pkl'))

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python期末考试案例代码]]></title>
        <id>https://youis.top/post/DHq7otHwc/</id>
        <link href="https://youis.top/post/DHq7otHwc/">
        </link>
        <updated>2020-08-31T11:30:00.000Z</updated>
        <summary type="html"><![CDATA[<p>期末考试的案例代码总结<br>
😁😁😁😁</p>
]]></summary>
        <content type="html"><![CDATA[<p>期末考试的案例代码总结<br>
😁😁😁😁</p>
<!-- more -->
<pre><code class="language-Python">from random import randint
'''
编写程序，生成包含1000个0到100之间的随机整数，并统计每个元素出现的次数
'''
lis = [randint(0, 100) for i in range(0, 1000)]
for i in set(lis):
    print(i, &quot;:&quot;, lis.count(i))
</code></pre>
<pre><code class="language-python">    '''
编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，
后10个元素降序排列，并输出结果。
'''
from random import randint
lis = [randint(0, 100) for i in range(0, 20)]
print(sorted(lis[:10])+sorted(lis[10:],reverse=True))
</code></pre>
<pre><code class="language-python">'''
编写程序，生成一个包含 20 个随机整数的列表，
然后对其中偶数下标的元素进行降序排列，奇数下标的元素不变。
'''
from random import randint
lis = [randint(0, 100) for i in range(0, 20)]
even = sorted(lis[::2], reverse=True)  # 偶数下标
print(lis)
print(even)
for i in range(0, 10):
    lis[i*2] = even[i]
print(lis)
</code></pre>
<pre><code class="language-python">'''
判断字符串是否为回文，使用切片实现。
'''
oldstr = &quot;123aba321&quot;
if oldstr == oldstr[::-1]:
    print(&quot;是回文字符串&quot;)
else:
    print(&quot;不是回文字符串&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ansible部署K8s_v1.18.4环境]]></title>
        <id>https://youis.top/post/154qMkJXW/</id>
        <link href="https://youis.top/post/154qMkJXW/">
        </link>
        <updated>2020-06-28T13:18:15.000Z</updated>
        <summary type="html"><![CDATA[<p>Kubernetes是Goole开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。<br>
本文介绍如何在本地自行搭建一套k8s集群。<br>
本文所涉及的所有配置文件详见&quot;离线包和镜像汇总资料&quot;。<br>
<img src="https://image.youis.top/QQ%E6%88%AA%E5%9B%BE20200627233552.jpg" alt="" loading="lazy"></p>
]]></summary>
        <content type="html"><![CDATA[<p>Kubernetes是Goole开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。<br>
本文介绍如何在本地自行搭建一套k8s集群。<br>
本文所涉及的所有配置文件详见&quot;离线包和镜像汇总资料&quot;。<br>
<img src="https://image.youis.top/QQ%E6%88%AA%E5%9B%BE20200627233552.jpg" alt="" loading="lazy"></p>
<!-- more -->
<p>由于Markdown不好编排，我附上Word连接<br>
👇👇👇👇<br>
<a href="http://cloud.youis.top/?r=/download&amp;path=L0Fuc2libGUvQW5zaWJsZemDqOe9sks4c192MS4xOC40546v5aKDMjAyMDA2MjTvvIjoh6rliqjljJbohJrmnKzvvIkuZG9jeA%3D%3D">Ansible部署K8s_v1.18.4环境.docx</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python检索关键字]]></title>
        <id>https://youis.top/post/nqFG2uASl/</id>
        <link href="https://youis.top/post/nqFG2uASl/">
        </link>
        <updated>2020-06-20T02:04:51.000Z</updated>
        <summary type="html"><![CDATA[<p>找到在某个目录下面所有的文件内容里面有关键字&quot;info&quot;的文件，将这些文件路径存储在一个t1.pkl的文件里面</p>
]]></summary>
        <content type="html"><![CDATA[<p>找到在某个目录下面所有的文件内容里面有关键字&quot;info&quot;的文件，将这些文件路径存储在一个t1.pkl的文件里面</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/6/20 9:21
@file: test.py
@desc:
&quot;&quot;&quot;
import os
import re


def listdir(path):
    &quot;&quot;&quot;
    遍历出，目录下所有文件
    @param path:  str
    &quot;&quot;&quot;
    for file in os.listdir(path):
        file_path = os.path.join(path, file)
        if os.path.isdir(file_path):  # 如果该文件是目录
            # print(file_path)
            listdir(file_path)  # 继续递归遍历
        else:
            # print(file_path)
            keyword_search(file_path)  # 读取文件，搜索关键字。


def keyword_search(file_path):
    &quot;&quot;&quot;
    打开文件，搜索关键字。
    @param file_path:
    &quot;&quot;&quot;
    f1 = open(file_path, &quot;r&quot;, encoding=&quot;utf-8&quot;)
    content = f1.read()
    # print(&quot;输出文件内容：\n&quot;, content)  # 输出文件内容
    count = len(re.findall(keyword, content))
    # re.findall()返回的是一个列表
    if count != 0:  # 如果个数不为 0
        print(file_path)
        with open('t1.pkl', 'a+') as f:
            f.write(file_path + '\n')  # 保存到该文件


if __name__ == '__main__':
    # start = time.clock()
    work_path = r&quot;D:\python\TestProject\PythonClassroom\work20\test&quot;  # 待检索的目录
    keyword = &quot;info&quot;  # 检索的关键字
    if os.path.isdir(work_path):
        listdir(work_path)  # 目录遍历
    else:
        print(&quot;请输入一个目录！！&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决pycurl安装错误]]></title>
        <id>https://youis.top/post/HYW8Js4p1/</id>
        <link href="https://youis.top/post/HYW8Js4p1/">
        </link>
        <updated>2020-06-03T06:43:49.000Z</updated>
        <summary type="html"><![CDATA[<p>由于libcurl的源码编译因素，在安装pycurl可能会导致以下两种错误。</p>
]]></summary>
        <content type="html"><![CDATA[<p>由于libcurl的源码编译因素，在安装pycurl可能会导致以下两种错误。</p>
<!-- more -->
<p>错误1：</p>
<p>ImportError: pycurl: libcurl link-time ssl backend (<strong>openssl</strong>) is different from compile-time ssl backend (none/other)</p>
<p>解决办法：</p>
<p>错误1的解决办法如下：</p>
<pre><code class="language-shell"> pip uninstall pycurl
#export PYCURL_SSL_LIBRARY=[nss|openssl|ssl|gnutls]
#参数由报错信息括号里面的内容决定。这里括号里面是  openssl
export PYCURL_SSL_LIBRARY=openssl

pip install pycurl
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python实现查找和排序]]></title>
        <id>https://youis.top/post/dfjsdhfbjdsbfj/</id>
        <link href="https://youis.top/post/dfjsdhfbjdsbfj/">
        </link>
        <updated>2020-05-24T02:04:44.000Z</updated>
        <summary type="html"><![CDATA[<p>学习python的同时顺便复习数据结构。<br>
🙌没人<br>
👐比我<br>
👌更懂<br>
👆复习😜<br>
未完待续。。。</p>
]]></summary>
        <content type="html"><![CDATA[<p>学习python的同时顺便复习数据结构。<br>
🙌没人<br>
👐比我<br>
👌更懂<br>
👆复习😜<br>
未完待续。。。</p>
<!-- more -->
<h1 id="顺序查找">顺序查找</h1>
<h1 id="折半查找">折半查找</h1>
<p>def binary_search(nums, key):<br>
left, right = 0, len(nums) - 1<br>
while left &lt;= right:<br>
mid = (left + right) // 2<br>
if nums[mid] == key:<br>
# 返回索引位置<br>
return mid<br>
elif nums[mid] &lt; key:<br>
left = mid + 1<br>
elif nums[mid] &gt; key:<br>
right = mid - 1<br>
return -1  # 没有找到返回 -1</p>
<p>if <strong>name</strong> == '<strong>main</strong>':<br>
lis = [2, 3, 4, 5, 5, 5, 6, 7, 23, 45, 90]<br>
print(binary_search(lis, 110))</p>
<h1 id="分块查找">分块查找</h1>
<h1 id="直接插入排序">直接插入排序</h1>
<h1 id="折半插入排序">折半插入排序</h1>
<h1 id="希尔排序">希尔排序</h1>
<h1 id="冒泡排序">冒泡排序</h1>
<p>相信冒泡排序已经被大家所熟知,下面的代码对冒泡排序进行了简单优化。</p>
<pre><code class="language-python">def bubble_sort(nums):
    for i in range(len(nums) - 1):
        ex_flag = False
        for j in range(len(nums) - 1 - i):
            if nums[j] &gt; nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]
                ex_flag = True
        if not ex_flag:
            return nums
    return nums


if __name__ == '__main__':
    lis = [2, 4, 5, 6, 7, 3, 5, 90, 45, 23, 5]
    print(bubble_sort(lis))
</code></pre>
<h1 id="快速排序">快速排序</h1>
<h1 id="简单选择排序">简单选择排序</h1>
<p>def select_sort(nums):<br>
for i in range(len(nums)):<br>
nums_min = i<br>
for j in range(i + 1, len(nums)):<br>
if nums[j] &lt; nums[nums_min]:<br>
nums_min = j<br>
nums[i], nums[nums_min] = nums[nums_min], nums[i]<br>
return nums</p>
<p>if <strong>name</strong> == '<strong>main</strong>':<br>
lis = [2, 4, 5, 6, 7, 3, 5, 90, 45, 23, 5]<br>
print(select_sort(lis))</p>
<h1 id="堆排序">堆排序</h1>
<h1 id="归并排序">归并排序</h1>
<h1 id="基数排序">基数排序</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[系统巡检脚本]]></title>
        <id>https://youis.top/post/xi-tong-xun-jian-jiao-ben/</id>
        <link href="https://youis.top/post/xi-tong-xun-jian-jiao-ben/">
        </link>
        <updated>2020-05-20T14:00:29.000Z</updated>
        <summary type="html"><![CDATA[<p>在生产环境中，作为日常巡检任务，时刻要注意主机的各种硬件状态，如果是规模较大的服务集群，一般使用zabbix等健康工具，如果只是一些小规模的服务主机，shell就会表现的更灵活，也更适用，下面是一个常用的系统巡检脚本。试运行，找出其中的错误，并修改，然后打印出执行结果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>在生产环境中，作为日常巡检任务，时刻要注意主机的各种硬件状态，如果是规模较大的服务集群，一般使用zabbix等健康工具，如果只是一些小规模的服务主机，shell就会表现的更灵活，也更适用，下面是一个常用的系统巡检脚本。试运行，找出其中的错误，并修改，然后打印出执行结果。</p>
<!-- more -->
<p>vi syscheck.sh</p>
<pre><code class="language-sh">#!/bin/bash

function system(){
echo &quot;#########################系统信息#########################&quot;
OS_TYPE=`uname`
OS_VER=`cat /etc/redhat-release`
OS_KER=`uname -a|awk '{print $3}'`
OS_TIME=`date +%F_%T`
OS_RUN_TIME=`uptime |awk '{print $3}'|awk -F '{print $1}'`
OS_LAST_REBOOT_TIME=`who -b|awk '{print $2,$3}'`
OS_HOSTNAME=`hostname`

echo &quot;    系统类型：$OS_TYPE&quot;
echo &quot;    系统版本：$OS_VER&quot;
echo &quot;    系统内核：$OS_KER&quot;
echo &quot;    当前时间：$OS_TIME&quot;
echo &quot;    运行时间：$OS_RUN_TIME&quot;
echo &quot;最后重启时间：$OS_LAST_REBOOT_TIME&quot;
echo &quot;    本机名称：$OS_HOSTNAME&quot;

function network(){

echo &quot;#########################网络信息#########################&quot;
INTERNET=(`ifconfig|grep ens|awk -F: '{print $1}'`)
for((i=0;i&lt;`echo ${#INTERNET[*]}`;i++))
do 
  OS_IP=`ifconfig ${INTERNET[$i]}|head -2|grep inet|awk '{print $2}'`
  echo &quot;      本机IP：${INTERNET[$i]}: $OS_IP&quot;
done
curl -I http://www.baidu.com &amp;&gt;/dev/null
if [ $? -eq 0 ]
then echo &quot;    访问外网：成功&quot;
else echo &quot;    访问外网：失败&quot;

}

function hardware(){

echo &quot;#########################硬件信息#########################&quot;
CPUID=`grep &quot;physical id&quot; /proc/cpuinfo |sort|uniq|wc -l`
CPUCORES=`grep &quot;cores&quot; /proc/cpuinfo|sort|uniq|awk -F: '{print $2}'`
CPUMODE=`grep &quot;model name&quot; /proc/cpuinfo|sort|uniq|awk -F '{print $2}'`

echo &quot;     CPU数量: $CPUID&quot;
echo &quot;     CPU核心:$CPUCORES&quot;
echo &quot;     CPU型号:$CPUMODE&quot;

MEMTOTAL=`free -m|grep Mem|awk '{print $2}'`
MEMFREE=`free -m|grep Mem|awk '{print $7}'`

echo &quot;  内存总容量: ${MEMTOTAL}MB&quot;
echo &quot;剩余内存容量: ${MEMFREE}MB&quot;

disksize=0
swapsize=`free|grep Swap|awk {'print $2'}`
partitionsize=(`df -T|sed 1d|egrep -v &quot;tmpfs|sr0&quot;|awk {'print $3'}`)
for ((i=0;i&lt;`echo ${#partitionsize[*]}`;i++))
do
disksize=`expr $disksize + ${partitionsize[$i]}`
done
((disktotal=\($disksize+$swapsize\)/1024/1024))

echo &quot;  磁盘总容量: ${disktotal}GB&quot;

diskfree=0
swapfree=`free|grep Swap|awk '{print $4}'`
partitionfree=(`df -T|sed 1d|egrep -v &quot;tmpfs|sr0&quot;|awk '{print $5}'`)
for ((i=0;i&lt;`echo ${#partitionfree[*]}`;i++))
do
diskfree=`expr $diskfree + ${partitionfree[$i]}`
done

((freetotal=\($diskfree+$swapfree\)/1024/1024))

echo &quot;剩余磁盘容量：${freetotal}GB&quot;
}


function secure(){
echo &quot;#########################安全信息#########################&quot;

countuser=(`last|grep &quot;still logged in&quot;|awk '{print $1}'|sort|uniq`)
for ((i=0;i&lt;`echo ${#countuser[*]}`;i++))
do echo &quot;当前登录用户：${countuser[$i]}&quot;
done

md5sum /etc/passwd &gt; /opt/passwd.db
md5sum -c --quiet /opt/passwd.db &amp;&gt;/dev/null
if [ $? -eq 0 ]
then echo &quot;    用户异常：否&quot;
else echo &quot;    用户异常：是&quot;
fi
}

function chksys(){
system
network
hardware
secure
}
</code></pre>
<p>提示一：<br>
<img src="https://image.youis.top/20200520220351.png" alt="" loading="lazy"><br>
if函数没有结尾  34行添加  fi<br>
提示二：</p>
<p><img src="https://image.youis.top/20200520220403.png" alt="" loading="lazy"><br>
函数 system 缺少  }  20行添加  }<br>
提示三：<br>
<img src="https://image.youis.top/20200520220416.png" alt="" loading="lazy"><br>
函数没有调用 在函数末尾调用 chksys函数<br>
提示四：<br>
<img src="https://image.youis.top/20200520220429.png" alt="" loading="lazy"></p>
<p>第9行 OS_RUN_TIME=<code>uptime |awk '{print $3}'|awk -F '{print $1}'</code>  AWK 存在管道信息,-F后面没有参数<br>
提示五：<br>
<img src="https://image.youis.top/20200520220439.png" alt="" loading="lazy"><br>
第43行 #CPUMODE=<code>grep &quot;model name&quot; /proc/cpuinfo|sort|uniq|awk -F '{print $2}'</code><br>
awk   -F  没有更参数</p>
<figure data-type="image" tabindex="1"><img src="https://image.youis.top/20200520215758.png" alt="" loading="lazy"></figure>
<p>修正代码：</p>
<pre><code class="language-sh">#!/bin/bash

function system(){
echo &quot;#########################系统信息#########################&quot;
OS_TYPE=`uname`
OS_VER=`cat /etc/redhat-release`
OS_KER=`uname -a|awk '{print $3}'`
OS_TIME=`date +%F_%T`
#OS_RUN_TIME=`uptime |awk '{print $3}'|awk -F '{print $1}'`
OS_RUN_TIME=`uptime |awk '{print $3}'|awk -F,  '{print $1}'`
OS_LAST_REBOOT_TIME=`who -b|awk '{print $2,$3}'`
OS_HOSTNAME=`hostname`

echo &quot;    系统类型：$OS_TYPE&quot;
echo &quot;    系统版本：$OS_VER&quot;
echo &quot;    系统内核：$OS_KER&quot;
echo &quot;    当前时间：$OS_TIME&quot;
echo &quot;    运行时间：$OS_RUN_TIME&quot;
echo &quot;最后重启时间：$OS_LAST_REBOOT_TIME&quot;
echo &quot;    本机名称：$OS_HOSTNAME&quot;
}
function network(){

echo &quot;#########################网络信息#########################&quot;
INTERNET=(`ifconfig|grep ens|awk -F: '{print $1}'`)
for((i=0;i&lt;`echo ${#INTERNET[*]}`;i++))
do 
  OS_IP=`ifconfig ${INTERNET[$i]}|head -2|grep inet|awk '{print $2}'`
  echo &quot;      本机IP：${INTERNET[$i]}: $OS_IP&quot;
done
curl -I http://www.baidu.com &amp;&gt;/dev/null
if [ $? -eq 0 ]
then echo &quot;    访问外网：成功&quot;
else echo &quot;    访问外网：失败&quot;
fi
}

function hardware(){

echo &quot;#########################硬件信息#########################&quot;
CPUID=`grep &quot;physical id&quot; /proc/cpuinfo |sort|uniq|wc -l`
CPUCORES=`grep &quot;cores&quot; /proc/cpuinfo|sort|uniq|awk -F: '{print $2}'`
#CPUMODE=`grep &quot;model name&quot; /proc/cpuinfo|sort|uniq|awk -F '{print $2}'`
CPUMODE=`grep &quot;model name&quot; /proc/cpuinfo|sort|uniq|awk -F: '{print $2}'`

echo &quot;     CPU数量: $CPUID&quot;
echo &quot;     CPU核心:$CPUCORES&quot;
echo &quot;     CPU型号:$CPUMODE&quot;

MEMTOTAL=`free -m|grep Mem|awk '{print $2}'`
MEMFREE=`free -m|grep Mem|awk '{print $7}'`

echo &quot;  内存总容量: ${MEMTOTAL}MB&quot;
echo &quot;剩余内存容量: ${MEMFREE}MB&quot;

disksize=0
swapsize=`free|grep Swap|awk {'print $2'}`
partitionsize=(`df -T|sed 1d|egrep -v &quot;tmpfs|sr0&quot;|awk {'print $3'}`)
for ((i=0;i&lt;`echo ${#partitionsize[*]}`;i++))
do
disksize=`expr $disksize + ${partitionsize[$i]}`
done
((disktotal=\($disksize+$swapsize\)/1024/1024))

echo &quot;  磁盘总容量: ${disktotal}GB&quot;

diskfree=0
swapfree=`free|grep Swap|awk '{print $4}'`
partitionfree=(`df -T|sed 1d|egrep -v &quot;tmpfs|sr0&quot;|awk '{print $5}'`)
for ((i=0;i&lt;`echo ${#partitionfree[*]}`;i++))
do
diskfree=`expr $diskfree + ${partitionfree[$i]}`
done

((freetotal=\($diskfree+$swapfree\)/1024/1024))

echo &quot;剩余磁盘容量：${freetotal}GB&quot;
}


function secure(){
echo &quot;#########################安全信息#########################&quot;

countuser=(`last|grep &quot;still logged in&quot;|awk '{print $1}'|sort|uniq`)
for ((i=0;i&lt;`echo ${#countuser[*]}`;i++))
do echo &quot;当前登录用户：${countuser[$i]}&quot;
done

md5sum /etc/passwd &gt; /opt/passwd.db
md5sum -c --quiet /opt/passwd.db &amp;&gt;/dev/null
if [ $? -eq 0 ]
then echo &quot;    用户异常：否&quot;
else echo &quot;    用户异常：是&quot;
fi
}

function chksys(){
system
network
hardware
secure
}
chksys
</code></pre>
]]></content>
    </entry>
</feed>
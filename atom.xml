<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.youis.top</id>
    <title>Eden的博客</title>
    <updated>2020-05-15T13:19:35.344Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.youis.top"/>
    <link rel="self" href="https://blog.youis.top/atom.xml"/>
    <subtitle>浮生若梦，人生几何</subtitle>
    <logo>https://blog.youis.top/images/avatar.png</logo>
    <icon>https://blog.youis.top/favicon.ico</icon>
    <rights>All rights reserved 2020, Eden的博客</rights>
    <entry>
        <title type="html"><![CDATA[python课堂案列]]></title>
        <id>https://blog.youis.top/post/python-ke-tang-an-lie/</id>
        <link href="https://blog.youis.top/post/python-ke-tang-an-lie/">
        </link>
        <updated>2020-05-15T06:24:48.000Z</updated>
        <summary type="html"><![CDATA[<p>重点讲解 杨辉三角 和 约瑟夫环报数游戏。<br>
💪💪💪💪<br>
python 永远滴神！！</p>
]]></summary>
        <content type="html"><![CDATA[<p>重点讲解 杨辉三角 和 约瑟夫环报数游戏。<br>
💪💪💪💪<br>
python 永远滴神！！</p>
<!-- more -->
<h1 id="例5-3-编写并使用能够生成斐波那契数列的生成器函数">例5-3 编写并使用能够生成斐波那契数列的生成器函数</h1>
<pre><code class="language-python">def demo(s):
    result = [0, 0]     #不能直接定义为元组，因为元组是不能对其中元素进行修改操作的。
    for ch in s:
        if ch.islower():
            result[1] += 1
        elif ch.isupper():
            result[0] += 1
    return tuple(result)
</code></pre>
<h1 id="例5-4-编写函数接收字符串参数返回一个元组其中第一个元素为大写字母个数第二个元素为小写字母个数">例5-4 编写函数，接收字符串参数，返回一个元组，其中第一个元素为大写字母个数，第二个元素为小写字母个数。</h1>
<pre><code class="language-python">def fun(s: str):
    result = [0, 0]
    for ch in s:
        if ch.islower():
            result[1] += 1
        elif ch.isupper():
            result[0] += 1
    return tuple(result)


if __name__ == '__main__':
    newstr = &quot;asdhasjgdAasghd&quot;
    print(len(newstr))
    print(fun(newstr))
</code></pre>
<h1 id="例5-5-编写函数接收一个整数t为参数打印杨辉三角前t行">例5-5  编写函数，接收一个整数t为参数，打印杨辉三角前t行。</h1>
<p>注意：看此教程前请先学习生成器的原理，yield返回的用法规律，不然可能会懵逼。<br>
下面我按照自己的理解写下思路：<br>
首先附上我们需要求得的杨辉三角：</p>
<pre><code>[1]
 
[1, 1]
 
[1, 2, 1]
 
[1, 3, 3, 1]
 
[1, 4, 6, 4, 1]
 
[1, 5, 10, 10, 5, 1]
 
[1, 6, 15, 20, 15, 6, 1]
 
[1, 7, 21, 35, 35, 21, 7, 1]
 
[1, 8, 28, 56, 70, 56, 28, 8, 1]
 
[1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
</code></pre>
<p>很显然，是按照一行一个数列（list）实现的，也就是说，我们得在程序中不断的返回每一行的list并且打印出来<br>
第一步：先找规律，抽象化问题：<br>
首先我们观察到，第一行为[1]，我们直接初始化列表 ： p = [1]<br>
其次我们观察到，下面的每一行的开头结尾都是[1],那么我们可以推导出每一行的规律为：[1]+.........+[1]<br>
那么我们发现，从第三行开始中间的 [2]，第四行中间的 [3，3]，第五行中间的 [4,6,4] 等等以此类推才是我们需要推导的部分</p>
<p>第一行：[1] 设 p = [1]</p>
<p>第二行：[1]+[1] 设 p = [1,1]</p>
<p>第三行：[1]+[2]+[1] 设 p = [1,2,1]</p>
<p>第四行：[1]+[3]+[3]+[1]设 p = [1,3,3,1]</p>
<p>....</p>
<p>经过找规律，我们发现，每一个新的list中间的部分，都等于上一行list的：第0个元素+第1个元素，第1个元素+第2个元素，第2个元素+第3个元素,.......</p>
<p>加上头尾也就是[1] +[ p[0]+p[1] ]+[ p[1]+p[2] ].....+[1]</p>
<p>比如上面第三行：p[0] = 1, p[1] = 2, p[2] = [1]</p>
<p>那么第四行就是：[1]   [1+2]   [2+1]   [1]</p>
<p>后面以此类推<br>
既然核心点是这个除去首位两个 [1] 的中间部分：[p[0] + p[1]]+[p[1] + p[2]]+[p[2] + p[3]]........</p>
<p>我们很容易得到规律：[p[i] + p[i+1]]# for i  in range(x)</p>
<p>如果还没看懂，你可以找一张纸，将每一行都按照这个规律写出来：</p>
<p>new p代表本行list的中间部分，p代表上一行list：</p>
<pre><code>[1]
 
[1]+[1]
 
[1]+[2]+[1] new p = p[0] + p[1] / i = 0,1 需要 i in range(1)
# range(1) = 0,根据[p[i] + p[i+1]]即可实现p[0]+p[0+1]
 
[1]+[3]+[3]+[1] new p = p[0] + p[1], p[1] + p[2] /i = 0,1,2 需要 i in range(2)
[1]+[4]+[6]+[4]+[1] new p = p[0] + p[1], p[1] + p[2], p[2] + p[3] /i = 0,1,2,3 需要 i in range(3)
[1]+[5]+[10]+[10]+[5]+[1] new p = p[0] + p[1], p[1] + p[2], p[2] + p[3], p[3] + p[4] /i = 0,1,2,3,4需要 i in range(4)
</code></pre>
<p>i的规律为上一行list元素个数-1，也就是len(p) - 1<br>
至此，已经可以得出推导式：<br>
[1] + [p[i] + p[i + 1] for i in range(len(p) - 1)] + [1]</p>
<p>补全程序代码：</p>
<pre><code class="language-python">def triangles(t):
    lis = [1]
    while t:
        print(lis)
        lis = [1] + [lis[i] + lis[i + 1] for i in range(len(lis) - 1)] + [1]
        t -= 1


if __name__ == '__main__':
    triangles(10)
</code></pre>
<p>运行结果：<br>
<img src="https://image.youis.top/20200515144823.png" alt="" loading="lazy"></p>
<h1 id="例5-6-编写函数接收一个正偶数为参数输出两个素数并且这两个素数之和等于原来的正偶数-如果存在多组符合条件的素数则全部输出">例5-6  编写函数，接收一个正偶数为参数，输出两个素数，并且这两个素数之和等于原来的正偶数。如果存在多组符合条件的素数，则全部输出。</h1>
<pre><code class="language-python">def demo(n):
    def IsPrime(p):
        if p == 2:
            return True
        if p % 2 == 0:
            return False
        for i in range(3, int(p ** 0.5) + 1, 2):
            if p % i == 0:
                return False
        return True

    if isinstance(n, int) and n &gt; 0 and n % 2 == 0:
        for i in range(2, n // 2 + 1):
            if IsPrime(i) and IsPrime(n - i):
                print(i, '+', n - i, '=', n)


if __name__ == '__main__':
    demo(100)
</code></pre>
<h1 id="例5-7-编写函数计算字符串匹配的准确率">例5-7  编写函数，计算字符串匹配的准确率。</h1>
<p>以打字练习程序为例，假设origin为原始内容，userInput为用户输入的内容，下面的代码用来测试用户输入的准确率。</p>
<pre><code class="language-python">
def rate(origin, user_input):
    if not (isinstance(origin, str) and isinstance(user_input, str)):
        origin = str(origin)
        user_input = str(origin)
    right = sum((1 for o, u in zip(origin, user_input) if o == u))
    return round(right / len(origin), 2)


if __name__ == '__main__':
    print(rate(&quot;12345&quot;, &quot;1233445&quot;))
</code></pre>
<h1 id="例5-8-编写函数模拟猜数游戏">例5-8  编写函数模拟猜数游戏。</h1>
<p>系统随机产生一个数，玩家最多可以猜5次，系统会根据玩家的猜测进行提示，玩家则可以根据系统的提示对下一次的猜测进行适当调整。</p>
<pre><code class="language-python">from random import randint


def guess(maxValue=100, maxTimes=5):
    # 随机生成一个整数
    value = randint(1, maxValue)
    print(&quot;游戏开始！&quot;)
    for i in range(maxTimes):
        prompt = '你还有 %d 次机会请输入猜测的数字：' % (maxTimes - i)
        # 使用异常处理结构，防止输入不是数字的情况
        try:
            x = int(input(prompt))
        except ValueError:
            print('Must input an integer between 1 and ', maxValue)
        else:
            # 猜对了
            if x == value:
                print('恭喜你，答对啦！')
                break
            elif x &gt; value:
                print('猜大啦！')
            else:
                print('猜小了')
    else:
        # 次数用完还没猜对，游戏结束，提示正确答案
        print('游戏结束')
        print('正确答案是', value)


if __name__ == '__main__':
    guess()
</code></pre>
<h1 id="编写函数模拟报数游戏">编写函数模拟报数游戏。</h1>
<p>有n个人围成一圈，顺序编号，从第一个人开始从1到k（假设k=3）报数，报到k的人退出圈子，然后圈子缩小，从下一个人继续游戏，问最后留下的是原来的第几号。<br>
第一步：演算一下过程。j假设n=10,k=3。由于列表索引值从0开始所以第一个删除的值应该是3，索引为2 （即 k-1）<br>
删除后后面数值的索引发生改变。6的索引从 5变为4 (2+k-1)<br>
依次类推。<br>
当到删除3,6,9 剩下：  1 2 4 5 7 8 10 按理应该删除 索引为8的值。<br>
但是总长度为7。所以求余  8 % 7 = 1 。所以删除索引为1的值。<br>
具体表格演示如下：<br>
<strong>pop(2)的意思是  删除上一行索引为 2 的列。</strong></p>
<table>
<thead>
<tr>
<th>索引</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">8</th>
<th style="text-align:center">9</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
</tr>
<tr>
<td>pop(2)</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(4)</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(6)</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(1)</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">7</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(3)</td>
<td style="text-align:center">1</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(0)</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(2)</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>pop(1)</td>
<td style="text-align:center">4</td>
<td style="text-align:center">10</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">4</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>代码实现：</p>
<pre><code class="language-python">def func(n=100, k=3):
    lis = [i for i in range(1, n + 1)]
    lis_len = len(lis)
    index = (k - 1) % lis_len
    while lis_len &gt; 1:
        lis.pop(index)
        lis_len -= 1
        index = (k - 1 + index) % lis_len
        # print(lis,   index)
    print(lis[0])


if __name__ == '__main__':
    func(10, 3)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux获取ip地址]]></title>
        <id>https://blog.youis.top/post/linux-huo-qu-ip-di-zhi/</id>
        <link href="https://blog.youis.top/post/linux-huo-qu-ip-di-zhi/">
        </link>
        <updated>2020-05-10T08:21:36.000Z</updated>
        <summary type="html"><![CDATA[<p>🐶🐶🐶<br>
需要脚本获取本机ip地址<br>
默认获取第二个网卡的IP地址<br>
第一个 127.0.0.1 这个地址获取没有作用</p>
]]></summary>
        <content type="html"><![CDATA[<p>🐶🐶🐶<br>
需要脚本获取本机ip地址<br>
默认获取第二个网卡的IP地址<br>
第一个 127.0.0.1 这个地址获取没有作用</p>
<!-- more -->
<pre><code>string=`ip addr | grep  -w &quot;inet&quot; | sed -n &quot;2, 2p&quot;  | awk '{print $2}'`
</code></pre>
<p>自动获取本机ip，然后探测相同网段的ip信息。</p>
<pre><code> #!/bin/bash
 pName=$(rpm -qa | grep &quot;nmap&quot;)
 if [ $? -eq 0 ]
 then
           echo &quot;软件包nmap已经安装。&quot;
 else
            yum  install nmap -y
fi
# 获取本机ip地址
string=`ip addr | grep  -w &quot;inet&quot; | sed -n &quot;2, 2p&quot;  | awk '{print $2}'`
str=`echo ${string} | cut -d &quot;.&quot; -f 4`
ip=`echo  ${string/$str/}`
  # 探测与本机相同网段的ip
  nmap -sP ${ip}0/24 | grep &quot;192&quot; | cut -d &quot; &quot; -f 5 &gt; ipfile
  echo &quot;&quot; &gt; res
  for iplis  in `cat ipfile`
  do
     echo &quot;$iplis 的信息&quot; &gt;&gt;  res
     nmap -p1-1024  $iplis | egrep -v &quot;Starting |Nmap|Host|Not&quot; &gt;&gt; res
     echo &quot;已探测 $iplis 的简略信息 &quot;
  done
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[shell脚本作业]]></title>
        <id>https://blog.youis.top/post/shell-jiao-ben-zuo-ye/</id>
        <link href="https://blog.youis.top/post/shell-jiao-ben-zuo-ye/">
        </link>
        <updated>2020-05-09T08:19:02.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="if-第一题">if 第一题</h1>
<p>设计一个shell程序，执行一次将备份并压缩/etc目录下的所有内容，存放在/root/bak目录里，且文件名为如下形式yymmdd_etc，yy为年，mm为月，dd为日。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="if-第一题">if 第一题</h1>
<p>设计一个shell程序，执行一次将备份并压缩/etc目录下的所有内容，存放在/root/bak目录里，且文件名为如下形式yymmdd_etc，yy为年，mm为月，dd为日。</p>
<!-- more -->
<p>提示：<br>
1、注意判断备份目录是否存在，不存在则创建；<br>
2、注意备份文件命名格式。</p>
<pre><code>#!/bin/bash
if [ ! -e &quot;/root/bak&quot; ];
then
mkdir /root/bak
fi
cd /root/bak    
YY=$(date +%Y)  
mm=$(date +%m)
DD=$(date +%d)
backupdir=&quot;$YY$mm$DD&quot;_etc.tar.gz  
echo $backupdir
tar -zcvf $backupdir /etc/ 
</code></pre>
<h1 id="if和-while-第二题">if和 while 第二题</h1>
<p>设计一个shell程序，添加一个新用户组为usergroup01，然后添加属于这个组的30个用户，用户名的形式为userxx，其中xx从01到30。<br>
提示：<br>
1、注意新建用户时会自动创建用户主目录；<br>
2、注意01和1的区别。</p>
<pre><code>#!/bin/bash
ug=usergroup01
groupadd $ug
for x in `seq -w 1 30`;
do 
 useradd user$x  -g $ug
done
</code></pre>
<h1 id="case-第三题">case 第三题</h1>
<p>设计一个脚本，可根据所列清单提示，输入相应编号，以不同的颜色打印清单名称。如果输入不正确或者不输入的话就打印帮助。例如：打印一个如下的水果菜单<br>
(1) banana<br>
(2) apple<br>
(3) pear<br>
(4) cherry<br>
实现结果：要求：输入1，则打印黄色字体banana；输入2，则打印红色字体apple；输入3，则打印绿色字体orange；输入4，则打印蓝色字体cherry。</p>
<pre><code>#!/bin/bash
echo &quot;#####################&quot;
echo &quot;	1.banana&quot;
echo &quot;	2.apple&quot;
echo &quot;	3.pear&quot;
echo &quot;	4.cherry&quot;
echo &quot;#####################&quot;
echo 
echo &quot;please select a num:&quot;
read Num
case $Num in
	1) echo -e &quot;\033[33m banana \033[0m&quot;
	;;
	2) echo -e &quot;\033[31m apple \033[0m&quot;
	;;
	3) echo -e &quot;\033[32m pear \033[0m&quot;
	;;
	4) echo -e &quot;\033[35m cherry \033[0m&quot;
	;;
	*) echo &quot;please input {1|2|3|4}&quot;
	;;
esac
</code></pre>
<h1 id="for-第四题">for 第四题</h1>
<p>设计一个脚本，把/var 目录下所有的文件递归罗列出来。</p>
<pre><code>#!/bin/bash
function travFolder(){
	cd $1
        path=`pwd`
	flist=`ls $pwd`
	for f in $flist
	do
		if [ -d $f ]
		then
			echo &quot;dir: $path&quot;
			travFolder $f
                        cd ..
		else
			echo &quot;flie:$f&quot;
		fi
	done
}
travFolder /var
</code></pre>
<h1 id="while和break-第五题">while和break 第五题</h1>
<p>设计一个shell脚本，执行后，打印一行提示“Please input a number:&quot;，要求用户输入数值，然后打印出该数值，然后再次要求用户输入数值，再打印出该数值，直到用户输入&quot;end&quot;停止。<br>
提示：<br>
1、注意测试符的使用；<br>
2、read的用法。</p>
<pre><code>#!/bin/bash
echo &quot;Please input a number:&quot;
read Num
while [ &quot;$Num&quot; !=  &quot;end&quot;  ]
do
	echo &quot;Your number: $Num&quot;
	echo &quot;Please input a number:&quot;
	read Num
done
</code></pre>
<h1 id="until-第六题">until 第六题</h1>
<p>设计一个脚本，执行脚本时，根据提示输入局域网内需要测试的IP地址段，判断同网段的所有主机有多少存活，就是有哪些IP地址是可以ping通的，并打印结果。</p>
<pre><code>#!/bin/bash
a=1
until [ $a -eq 256 ]
do
	ping 192.168.3.$a -c 2 | grep -q &quot;ttl=&quot; &amp;&amp; echo &quot;192.168.3.$a yes&quot; || echo &quot;192.168.3.$a no&quot; &gt;&gt; ip.txt
	let &quot;a++&quot;
done
</code></pre>
<h1 id="函数-if-第七题">函数、if 第七题</h1>
<p>设计一个监控脚本，若http服务出现异常则重新启动该服务。</p>
<pre><code>#! /bin/sh
	    proc_name=&quot;./server&quot;            #进程名
	    proc_num()                      #查询进程数量
	    {
	    	num=$(ps -ef |  grep gdms |grep $proc_name | grep -v &quot;grep&quot; | wc -l)
	    	echo $num
	        return $num
	    }
	    proc_num
	    number=$?                       #获取进程数量  
	    if [ $number -eq 0 ]            #如果进程数量为0
	    then                            #重新启动服务器，或者扩展其它内容。  
	        cd /home/liudongwei/workspace/server2.0/dist
	        nohup ./server &amp;  
	    fi

</code></pre>
<h1 id="if和continue-第八题">if和continue 第八题：</h1>
<p>设计一个脚本，利用循环和continue，计算100以内能被3整除的数之和。</p>
<pre><code>#!/bin/bash
s=0
for((i=1;i&lt;100;i++));
do
        if [ `expr $i % 3` -eq 0 ]
        then
                echo &quot;能被3整除的数：$i&quot;
                s=`expr $s + $i`
        fi
done
echo &quot;100以内能被3整除的数之和：$s&quot;
</code></pre>
<h1 id="函数-shift和while-第九题">函数、shift和while 第九题</h1>
<p>设计一个脚本，脚本中调用函数，利用shift计算所有函数参数乘积，假设参数均为整数，分别为3、5、7、9。</p>
<pre><code>#!/bin/bash
s=1
func(){
	while (($#&gt;0))
	do
		let s=s*$1
		shift
	done
}
func 3 5 7 9
echo &quot;$s&quot;
</code></pre>
<h1 id="函数-第十题">函数 第十题</h1>
<p>下面脚本用于新装Linux的相关配置工作，比如更换默认yum源，优化系统内核、停掉一些没必要启动的系统服务等。此脚本尤其适合大批新安装的CentOS系列的服务器。适用于Centos7。执行并分析下面脚本内容，对关键语句，给出正确的注释。并打印执行结果。</p>
<pre><code>#!/bin/bash
#1.__________________________ 
if [ `whoami` != &quot;root&quot; ];then
echo &quot; only root can run it&quot;
exit 1
fi
#2._______________________ 
echo -e &quot;\033[31m 这是centos7系统初始化脚本，将更新系统内核至最新版本，请慎重运行！\033[0m&quot; 
read -s -n1 -p &quot;Press any key to continue or ctrl+C to cancel&quot;
echo &quot;Your inputs: $REPLY&quot;
#3._______________________________
yum_config(){
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum clean all &amp;&amp; yum makecache
}
#4._____________________________________
ntp_config(){
yum -y install chrony
systemctl start chronyd &amp;&amp; systemctl enable chronyd
timedatectl set-timezone Asia/Shanghai &amp;&amp; timedatectl set-ntp yes
}
#5.__________________________________________
close_firewalld(){
systemctl stop firewalld.service &amp;&gt; /dev/null
systemctl disable firewalld.service &amp;&gt; /dev/null
}
#6.___________________________________
close_selinux(){
setenforce 0
sed -i 's/enforcing/disabled/g' /etc/selinux/config
}
#7.________________________________________
yum_tools(){
yum install -y vim wget curl curl-devel bash-completion lsof iotop iostat unzip bzip2 bzip2-devel
yum install -y gcc gcc-c++ make cmake autoconf openssl-devel openssl-perl net-tools
source /usr/share/bash-completion/bash_completion
}
#8.___________________________________
update_kernel (){
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
yum --enablerepo=elrepo-kernel install -y kernel-ml
grub2-set-default 0
grub2-mkconfig -o /boot/grub2/grub.cfg
}
#9.__________________________________
main(){
    yum_config;
    ntp_config;
    close_firewalld;
    close_selinux;
    yum_tools;
    update_kernel;
}
main
</code></pre>
<p>脚本打印结果截图：（如果系统默认未安装wget，找出解决方法然后修改脚本）</p>
<pre><code>#!/bin/bash
yum -y install wget 
#1._____判断是否为root用户_____________________ 
if [ `whoami` != &quot;root&quot; ];then
echo &quot; only root can run it&quot;
exit 1
fi
#2.______温馨提示_________________ 
echo -e &quot;\033[31m 这是centos7系统初始化脚本，将更新系统内核至最新版本，请慎重运行！\033[0m&quot; 
read -s -n1 -p &quot;Press any key to continue or ctrl+C to cancel&quot;
echo &quot;Your inputs: $REPLY&quot;
#3.______配置yum源_________________________
yum_config(){
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
yum clean all &amp;&amp; yum makecache
}
#4.______配置ntp_______________________________
ntp_config(){
yum -y install chrony
systemctl start chronyd &amp;&amp; systemctl enable chronyd
timedatectl set-timezone Asia/Shanghai &amp;&amp; timedatectl set-ntp yes
}
#5.______关闭防火墙____________________________________
close_firewalld(){
systemctl stop firewalld.service &amp;&gt; /dev/null
systemctl disable firewalld.service &amp;&gt; /dev/null
}
#6._______关闭selinux____________________________
close_selinux(){
setenforce 0
sed -i 's/enforcing/disabled/g' /etc/selinux/config
}
#7._______安装yum工具_________________________________
yum_tools(){
yum install -y vim wget curl curl-devel bash-completion lsof iotop iostat unzip bzip2 bzip2-devel
yum install -y gcc gcc-c++ make cmake autoconf openssl-devel openssl-perl net-tools
source /usr/share/bash-completion/bash_completion
}
#8.________更新内核___________________________
update_kernel (){
rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
yum --enablerepo=elrepo-kernel install -y kernel-ml
grub2-set-default 0
grub2-mkconfig -o /boot/grub2/grub.cfg
}
#9.________主函数执行之前定义的脚本__________________________
main(){
    yum_config;
    ntp_config;
    close_firewalld;
    close_selinux;
    yum_tools;
    update_kernel;
}
main
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python尼姆游戏]]></title>
        <id>https://blog.youis.top/post/python-ni-mu-you-xi/</id>
        <link href="https://blog.youis.top/post/python-ni-mu-you-xi/">
        </link>
        <updated>2020-05-03T07:49:10.000Z</updated>
        <summary type="html"><![CDATA[<p>五一小长假都有作业。<br>
假中假可还行，还没开学就放假</p>
]]></summary>
        <content type="html"><![CDATA[<p>五一小长假都有作业。<br>
假中假可还行，还没开学就放假</p>
<!-- more -->
<h1 id="第三题-绘制菱形">第三题 绘制菱形</h1>
<p>编写代码，输出由星号*组成的菱形图案，并且可以灵活控制图案的大小。</p>
<pre><code class="language-python">
n = 6  # 菱形得到大小
for i in range(n):
    print((' * ' * i).center(n * 3))
for i in range(n, 0, -1):
    print((' * ' * i).center(n * 3))
</code></pre>
<h1 id="第四题-组合计算">第四题  组合计算</h1>
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/5/2 12:11
@file: problem_04.py
@desc:
4．编写程序，计算组合数C(n,i)，即从n个元素中任选i个，有多少种选法。
&quot;&quot;&quot;

import math

n, m = 6, 2
print(math.factorial(n) // (math.factorial(m) * math.factorial(n - m)))

</code></pre>
<h1 id="第五题-比赛成绩">第五题  比赛成绩</h1>
<p>模拟决赛现场最终成绩的计算过程。<br>
有至少3个评委，<br>
打分规则为删除最高分和最低分之后计算剩余分数的平均分。</p>
<pre><code class="language-python">
# 评分
while True:
    scores = input(&quot;请录入分数，以空格间隔分数: &quot;).split()
    scores = list(map(float, scores))
    if len(scores) &lt; 3:
        print(&quot;评委人数小于3人,请重新录入分数&quot;)
    else:
        break
score_max = max(scores)
score_min = min(scores)
print(&quot;去掉一个最高分 %0.2f&quot; % score_max)
print(&quot;去掉一个最低分 %0.2f&quot; % score_min)
scores.remove(score_max)
scores.remove(score_min)
scores_sum = sum(scores)
final_score = scores_sum / len(scores)
print(&quot;最后得分  %0.2f&quot; % final_score)
</code></pre>
<h1 id="第六题-尼姆游戏">第六题  尼姆游戏</h1>
<p>只有一堆棋子<br>
每次从尼姆堆中拿走的棋子数量不能超过尼姆堆中棋子数量的一半<br>
但至少取走一个<br>
最后不能再取的就是输家。<br>
(待补充尼姆游戏必胜算法)<br>
可以先参考此文章👉👉👉<a href="https://www.cnblogs.com/strong-1-1-python/p/7825973.html">点击阅读</a></p>
<pre><code class="language-python"># encoding: utf-8
from random import randint
from math import floor, log2


def answer_n(x):
    return floor(log2(x / 3))


def smart(n):
    if n &lt;= 3:
        return 1
    if log2((n + 1) / 3) % 1 == 0:
        # 处于必输状态，随机数量
        return randint(1, n // 2)
    else:
        # 按玩家必输模式计算出机器人应拿走的数量
        return n - (3 * 2 ** answer_n(n) - 1)


def re_input():
    while True:
        try:
            nums = int(input(&quot;该你了，你要拿走:&quot;))
            return nums
        except ValueError:
            print(&quot;请输入一个数字！！！&quot;)


def nim_game(n):
    while True:
        print(&quot;现在共有&quot; + str(n) + &quot;个棋子&quot;)
        nim = smart(n)
        print(&quot;Eden拿走了&quot; + str(nim) + &quot;个&quot;)
        n -= nim
        print(&quot;现在共有&quot; + str(n) + &quot;个棋子&quot;)
        if n == 0:
            print(&quot;你输了！&quot;)
            return

        you = re_input()
        while True:
            if 1 &lt;= you &lt;= n / 2 or n == 1:
                print(&quot;你拿走了&quot; + str(you) + &quot;个&quot;)
                break
            if you &lt; 1:
                print(&quot;至少要拿走一个棋子！&quot;)
            else:
                print(&quot;最多只能拿走一半的棋子！&quot;)
            you = re_input()

        n -= you
        if n == 0:
            print(&quot;现在共有&quot; + str(n) + &quot;个棋子&quot;)
            print(&quot;你赢了！&quot;)
            return


if __name__ == '__main__':
    num = int(input(&quot;请输入棋子的总数: &quot;))
    nim_game(num)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[谁没交作业，让我康康]]></title>
        <id>https://blog.youis.top/post/0TQcnCohv/</id>
        <link href="https://blog.youis.top/post/0TQcnCohv/">
        </link>
        <updated>2020-05-01T02:12:17.000Z</updated>
        <summary type="html"><![CDATA[<p>收作业不清楚谁没交，一个一个的数，太麻烦。<br>
😏😏😏<br>
写一个程序搞定他。</p>
]]></summary>
        <content type="html"><![CDATA[<p>收作业不清楚谁没交，一个一个的数，太麻烦。<br>
😏😏😏<br>
写一个程序搞定他。</p>
<!-- more -->
<pre><code class="language-python"># encoding: utf-8
&quot;&quot;&quot;
@author: Eden
@contact: .....
@time: 2020/3/26 17:56
@file: homeWork.py
@desc:      作业查收，扫描文件夹，利用正则表达式，匹配唯一id学号
        然后遍历名单，获取未交作业人员
&quot;&quot;&quot;
import os
import pandas as pd
import re
import threading
import zipfile
import time


def listdir(path, list_name):
    &quot;&quot;&quot;
    @param path:  str
    @param list_name: list
    &quot;&quot;&quot;
    for file in os.listdir(path):
        file_path = os.path.join(path, file)
        if os.path.isdir(file_path):
            # 判断对象是否是一个目录
            # 修改建议，目录直接压缩，判断压缩后的文件是否已经存在。？？？？
            listdir(file_path, list_name)
        else:
            # print(re.findall(r&quot;\d+\.?\d*&quot;, file_path))
            # file_path = re.findall(r&quot;\d+\.?\d*&quot;, file_path)[0]
            file_path = re.findall(r&quot;\d+&quot;, file_path)[0]  # /d匹配数字，+匹配多次
            if len(file_path) != 10:  # 如果学号不是10位数字，代表学号错误。
                print(file_path + &quot;是一个错误的学号&quot;)
            # print(file)
            # print(file_path)
            list_name.add(int(file_path))


def reprint():
    set_len = len(unpaid)
    if set_len &gt; 0:
        print(&quot;还有%d名同学没有教作业！！&quot; % set_len)
        for index in unpaid:
            print(index, df[index])
    else:
        print(&quot;作业已经交齐了。&quot;)


if __name__ == '__main__':
    # start = time.clock()
    work_path = r&quot;E:\study\Linux高级运维\作业\Linux高级运维_shell脚本作业_第四次作业&quot;
    work_list = set()
    t = threading.Thread(target=listdir, args=(work_path, work_list))
    t.start()
    # listdir(work_path, work_list)
    excel_path = r&quot;RenYuanMingDan.xlsx&quot;  # 人员名单
    df = pd.read_excel(excel_path, encoding=&quot;utf-8&quot;, usecols=[u&quot;姓名&quot;, u&quot;学号&quot;])
    df = df.set_index([u&quot;学号&quot;])
    df = df.to_dict()
    df = df[u&quot;姓名&quot;]
    t.join()
    unpaid = set(df) - work_list
    reprint()
    # elapsed = (time.clock() - start)
    # print(&quot;Time used:&quot;, elapsed)

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python案列(电影推荐)]]></title>
        <id>https://blog.youis.top/post/3mEbBUOoi/</id>
        <link href="https://blog.youis.top/post/3mEbBUOoi/">
        </link>
        <updated>2020-04-27T07:42:25.000Z</updated>
        <summary type="html"><![CDATA[<p>python的第五次作业<br>
这个是python课的一个小案列，不涉及大数据推荐等等。<br>
只是一个简单的集合应用</p>
<h1 id="问题描述">问题描述</h1>
<p>假设已有大量用户对若干电影的评分数据，现有某用户，也看过一些电影并进行过评分，要求根据已有打分数据为该用户进行推荐。</p>
]]></summary>
        <content type="html"><![CDATA[<p>python的第五次作业<br>
这个是python课的一个小案列，不涉及大数据推荐等等。<br>
只是一个简单的集合应用</p>
<h1 id="问题描述">问题描述</h1>
<p>假设已有大量用户对若干电影的评分数据，现有某用户，也看过一些电影并进行过评分，要求根据已有打分数据为该用户进行推荐。</p>
<!-- more -->
<h1 id="基本思路">基本思路</h1>
<p>基本思路：用基于用户的协同过滤算法，也就是根据用户喜好来确定与当前用户最相似的用户，然后再根据最相似用户的喜好为当前用户进行推荐。本例采用字典来存放打分数据，格式为{用户1:{电影名称1:打分1, 电影名称2:打分2,...}, 用户2:{...}}，首先在已有数据中查找与当前用户共同打分电影（使用集合的交集运算）数量最多的用户，如果有多个这样的用户就再从中选择打分最接近（打分的差距最小）的用户。代码中使用到了random模块中的randrange()函数，用来生成指定范围内的一个随机数。<br>
效果图如下：<br>
<img src="https://image.youis.top/20200427160605.png" alt="" loading="lazy"></p>
<h1 id="解法一">解法一</h1>
<pre><code class="language-python">from random import randrange

# 历史电影打分数据，一共10个用户，每个用户对3到9个电影进行评分
# 每个电影的评分最低1分最高5分，这里是字典推导式和集合推导式的用法
data = {'user' + str(i): {'film' + str(randrange(1, 15)): randrange(1, 6)
                          for j in range(randrange(3, 10))}
        for i in range(10)}
# 模拟当前用户打分数据，为5部随机电影打分
user = {'film' + str(randrange(1, 15)): randrange(1, 6) for i in range(5)}
# 最相似的用户及其对电影打分情况
# 两个用户共同打分的电影最多
# 并且所有电影打分差值的平方和最小
f = lambda item: (-len(item[1].keys() &amp; user),
                  sum(((item[1].get(film) - user.get(film)) ** 2
                       for film in user.keys() &amp; item[1].keys())))
similarUser, films = min(data.items(), key=f)
# 在输出结果中，第一列表示两个人共同打分的电影的数量
# 第二列表示二人打分之间的相似度，数字越小表示越相似
# 然后是该用户对电影的打分数据
print('known data'.center(50, '='))
for item in data.items():
    print(len(item[1].keys() &amp; user.keys()),
          sum(((item[1].get(film) - user.get(film)) ** 2
               for film in user.keys() &amp; item[1].keys())),
          item,
          sep=':')
print('current user'.center(50, '='))
print(user)
print('most similar user and his films'.center(50, '='))
print(similarUser, films, sep=':')
print('recommended film'.center(50, '='))
# 在当前用户没看过的电影中选择打分最高的进行推荐
print(max(films.keys() - user.keys(), key=lambda film: films[film]))
</code></pre>
<h1 id="解法二">解法二</h1>
<pre><code class="language-python">from random import randrange


def diff_value(use, fil):
    score = 0
    for filmName in fil:
        # 计算两个用户的打分差距
        score += abs(data[use][filmName] - user[filmName])
    return score


# 模拟获取数据
data = {'user' + str(i): {'film' + str(randrange(1, 15)): randrange(1, 6) for j in range(randrange(3, 10))}
        for i in range(1, 11)}
print(&quot;=====模拟数据=====&quot;)
print(data)
# 模拟用户喜好
user = {'film' + str(randrange(1, 15)): randrange(1, 6) for j in range(randrange(3, 10))}
print(&quot;=====模拟当前用户喜好=====&quot;)
print(user)
film_len = 0  # 共同打分的数目
film_user = &quot;&quot;  # 最接近的那个用户
film_score = 0  # 记录分数差距
for key, value in data.items():
    film = set(value) &amp; set(user)  # 共同打分的电影
    # print(key, film)
    # 共同电影打分数目相同，则比较分数。
    if len(film) == film_len:
        if diff_value(key, film) &lt; film_score:
            film_len = len(film)
            film_user = key
            film_score = diff_value(key, film)
    if len(film) &gt; film_len:
        film_len = len(film)
        film_user = key
        film_score = diff_value(key, film)
print(&quot;=====最相似的用户和他的电影====&quot;)
print(film_user, data[film_user])
print(&quot;=====推荐的电影如下：======&quot;)


def max_score(film):
    return data[film_user][film]


# 推荐评分最高的电影
print(max(set(data[film_user]) - set(user), key=max_score))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gradle安装]]></title>
        <id>https://blog.youis.top/post/7b8Oe4egB/</id>
        <link href="https://blog.youis.top/post/7b8Oe4egB/">
        </link>
        <updated>2020-04-26T08:15:22.000Z</updated>
        <summary type="html"><![CDATA[<p>Gradle + eclipse 输入helloworld<br>
确保JDK安装成功。<br>
java 版本java1.8</p>
<h1 id="安装步骤">安装步骤</h1>
]]></summary>
        <content type="html"><![CDATA[<p>Gradle + eclipse 输入helloworld<br>
确保JDK安装成功。<br>
java 版本java1.8</p>
<h1 id="安装步骤">安装步骤</h1>
<!-- more -->
<p>Gradle(v4.10.3)下载地址 👉👉👉<a href="https://downloads.gradle-dn.com/distributions/gradle-4.10.3-all.zip">点击下载</a><br>
解压压缩包。<br>
右键此电脑👉-&gt;点击属性。<br>
按照图片添加环境变量<br>
<img src="https://image.youis.top/20200426162119.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426162405.png" alt="" loading="lazy"><br>
检查是否安装完成<br>
<img src="https://image.youis.top/20200426162453.png" alt="" loading="lazy"><br>
启动eclipse,点击window菜单，选择Preferences-&gt;Gradle设置Gradle位置<br>
<img src="https://image.youis.top/20200426162614.png" alt="" loading="lazy"><br>
1、创建Gradle项目<br>
方式1：<a href="https://start.spring.io/">https://start.spring.io/</a>用网站提供的生成<br>
<img src="https://image.youis.top/20200426162854.png" alt="" loading="lazy"><br>
eclipse 操作File-&gt;import-&gt;Gradle<br>
<img src="https://image.youis.top/20200426162940.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426162954.png" alt="" loading="lazy"><br>
<img src="https://image.youis.top/20200426163004.png" alt="" loading="lazy"><br>
等待构建完成。<br>
<img src="https://image.youis.top/20200426163357.png" alt="" loading="lazy"><br>
然后点击运行。<br>
<img src="https://image.youis.top/5HL%60RTSLLQ1XKI4A%6094%5D%25SM.png" alt="" loading="lazy"></p>
<h1 id="报错处理">报错处理</h1>
<p>若中途报java错误，把jdk/lib/tools.jar复制一份到jre/lib里面</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker安装kafka]]></title>
        <id>https://blog.youis.top/post/NKkoP0wN4/</id>
        <link href="https://blog.youis.top/post/NKkoP0wN4/">
        </link>
        <updated>2020-04-25T08:21:56.000Z</updated>
        <summary type="html"><![CDATA[<p>docker妈耶，真香😁😁😁😁</p>
<h1 id="安装zookeeper">安装zookeeper</h1>
<p>kafka需要zookeeper管理，所以需要先安装zookeeper。<br>
下载zookeeper镜像<br>
$ docker pull zookeeper</p>
]]></summary>
        <content type="html"><![CDATA[<p>docker妈耶，真香😁😁😁😁</p>
<h1 id="安装zookeeper">安装zookeeper</h1>
<p>kafka需要zookeeper管理，所以需要先安装zookeeper。<br>
下载zookeeper镜像<br>
$ docker pull zookeeper</p>
<!-- more -->
<h2 id="启动镜像生成容器">启动镜像生成容器</h2>
<pre><code class="language-shell">docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2  --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper
</code></pre>
<h1 id="下载kafka镜像">下载kafka镜像</h1>
<pre><code class="language-shell">docker pull wurstmeister/kafka
</code></pre>
<p>4、启动kafka镜像生成容器</p>
<pre><code class="language-shell">docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.16.0.13:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.0.13:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka
</code></pre>
<p>参数说明：<br>
-e KAFKA_BROKER_ID=0  在kafka集群中，每个kafka都有一个BROKER_ID来区分自己</p>
<p>-e KAFKA_ZOOKEEPER_CONNECT=172.16.0.13:2181/kafka 配置zookeeper管理kafka的路径172.16.0.13:2181/kafka</p>
<p>-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.16.0.13:9092  把kafka的地址端口注册给zookeeper，如果是远程访问要改成外网IP,类如Java程序访问出现无法连接。</p>
<p>-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 配置kafka的监听端口</p>
<p>-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间</p>
<p>5、验证kafka是否可以使用</p>
<p>5.1、进入容器<br>
$ docker exec -it kafka bash</p>
<p>5.2、进入 /opt/kafka_2.12-2.3.0/bin/ 目录下<br>
$ cd /opt/kafka_2.12-2.3.0/bin/</p>
<p>5.3、运行kafka生产者发送消息<br>
$ ./kafka-console-producer.sh --broker-list localhost:9092 --topic sun</p>
<p>发送消息</p>
<pre><code>{&quot;datas&quot;:[{&quot;channel&quot;:&quot;&quot;,&quot;metric&quot;:&quot;temperature&quot;,&quot;producer&quot;:&quot;ijinus&quot;,&quot;sn&quot;:&quot;IJA0101-00002245&quot;,&quot;time&quot;:&quot;1543207156000&quot;,&quot;value&quot;:&quot;80&quot;}],&quot;ver&quot;:&quot;1.0&quot;}
</code></pre>
<p>5.4、运行kafka消费者接收消息<br>
$ ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sun --from-beginning</p>
<p>👉👉<a href="https://www.cnblogs.com/linjiqin/p/11891776.html">参考文章</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[又拍云使用]]></title>
        <id>https://blog.youis.top/post/iobZKkOLk/</id>
        <link href="https://blog.youis.top/post/iobZKkOLk/">
        </link>
        <updated>2020-04-24T06:32:56.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。😒😒😒</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>七牛云的cdn加速，使用https的话，要收费，没有免费流量。😒😒😒</p>
<p><a href="https://console.upyun.com/register/?invite=ryOpVZxtL">又拍云注册连接</a></p>
<p>直接上图</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://image.youis.top/20200424142140.png" alt="" loading="lazy"></figure>
<p>香不香，15G的流量。还可以https 😍😍😍</p>
<figure data-type="image" tabindex="2"><img src="https://image.youis.top/20200424142927.png" alt="" loading="lazy"></figure>
<p>有一点就是，添加logo的时候，是点击图片，就可以访问官网。</p>
<p>参考代码：</p>
<pre><code class="language-html">&lt;a href=&quot;https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral&quot;&gt;&lt;img src=&quot;https://www.z4a.net/images/2020/04/20/_logo5.png&quot; alt=&quot;_logo5.png&quot; border=&quot;0&quot; width=&quot;100&quot; height=&quot;20&quot; /&gt;&lt;/a&gt;
</code></pre>
<h1 id="如何开启https">如何开启HTTPS</h1>
<p>创建服务后，点击https，点击管理。添加证书即可，在又拍云购买的免费证书，需要几分钟认证。</p>
<figure data-type="image" tabindex="3"><img src="https://image.youis.top/20200424142517.png" alt="" loading="lazy"></figure>
<p>其他使用还是和七牛云差不多的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python第四次作业]]></title>
        <id>https://blog.youis.top/post/sRdAP2jaU/</id>
        <link href="https://blog.youis.top/post/sRdAP2jaU/">
        </link>
        <updated>2020-04-22T01:54:31.000Z</updated>
        <summary type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
]]></summary>
        <content type="html"><![CDATA[<p>每节课都有作业。。。。。<br>
还有一个作业是上次布置过的。🙃🙃🙃</p>
<!-- more -->
<p>1、首先生成包含1000个随机字符的字符串，然后统计每个字符的出现次数。<br>
参考string字符串模块的元组：</p>
<pre><code>import string
import random

x = string.ascii_letters + string.digits + string.punctuation
# print(x)
y = [random.choice(x) for i in range(1000)]  # 生成包含1000个随机字符的字符串
# print(y)
dic = dict()  # 使用字典保存每个字符出现次数
for ch in y:
    dic[ch] = dic.get(ch, 0) + 1  # d.get(ch,0) 返回ch出现的次数，若没有返回0
print(dic)
# nums = 0
# for values in dic.values():
#     nums += values
# print(nums)
</code></pre>
<p>2、写代码：有如下字典<br>
按照要求实现每一个功能</p>
<pre><code>dic = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}

# 1、请循环遍历出所有的key
for key in dic:
    print(key)
# 2、请循环遍历出所有的value
for value in dic.values():
    print(value)
# 3、请循环遍历出所有的key和value
for key, value in dic.items():
    print(key, value)
# 4、请在字典中增加一个键值对,&quot;k4&quot;:&quot;v4&quot;，输出添加后的字典
dic[&quot;k4&quot;] = &quot;v4&quot;
print(dic)
# 5、请删除字典中键值对&quot;k1&quot;:&quot;v1&quot;,并输出删除后的结果
dic.pop(&quot;k1&quot;)
print(dic)
# 6、请删除字典中键&quot;k5&quot;对应的键值对，如果字典中不存在键&quot;k5&quot;,则不报错，返回None
print(dic.pop(&quot;k5&quot;, None))
# 7、请获取字典中&quot;k2&quot;对应的值
print(dic[&quot;k2&quot;])
# 8、请获取字典中&quot;k6&quot;对应的值,如果不存在，则不报错，并且让其返回None。
print(dic.get(&quot;k6&quot;))
# 9、现有dict2 = {&quot;k1&quot;:&quot;v11&quot;,&quot;a&quot;:&quot;b&quot;},通过一行操作使dict2 = {&quot;k1&quot;:&quot;v1&quot;,&quot;k2&quot;:&quot;v2&quot;,&quot;k3&quot;:&quot;v3&quot;,&quot;a&quot;:&quot;b&quot;}
dict1 = {&quot;k1&quot;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: &quot;v3&quot;}
dict2 = {&quot;k1&quot;: &quot;v11&quot;, &quot;a&quot;: &quot;b&quot;}
dict2.update(dict1)
print(dict2)
</code></pre>
<p>3、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能</p>
<pre><code># 10、组合嵌套题。写代码，有如下列表，按照要求实现每一个功能
lis = [[&quot;k&quot;, [&quot;qwe&quot;, 20, {&quot;k1&quot;: [&quot;tt&quot;, 3, &quot;1&quot;]}, 89], &quot;ab&quot;]]
# 10.1、将列表中的字符串“tt”变成字符串&quot;TT&quot;(用两种方法)
#  方法一：
lis[0][1][2][&quot;k1&quot;][0] = &quot;TT&quot;
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[0] = &quot;TT&quot;
print(lis)
# 10.2、将列表中的字符串&quot;1&quot;变成数字101(用两种方法)
lis[0][1][2][&quot;k1&quot;][2] = 101
print(lis)
#  方法二：
lis[0][1][2].get(&quot;k1&quot;)[2] = 101
print(lis)
</code></pre>
]]></content>
    </entry>
</feed>
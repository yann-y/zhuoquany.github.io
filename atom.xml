<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhuoquany.github.io</id>
    <title>EdenBlog</title>
    <updated>2020-04-13T07:43:46.082Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhuoquany.github.io"/>
    <link rel="self" href="https://zhuoquany.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zhuoquany.github.io/images/avatar.png</logo>
    <icon>https://zhuoquany.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, EdenBlog</rights>
    <entry>
        <title type="html"><![CDATA[python十一道练习]]></title>
        <id>https://zhuoquany.github.io/post/python-shi-yi-dao-lian-xi/</id>
        <link href="https://zhuoquany.github.io/post/python-shi-yi-dao-lian-xi/">
        </link>
        <updated>2020-04-13T07:32:23.000Z</updated>
        <summary type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
]]></summary>
        <content type="html"><![CDATA[<p>python课后作业<br>
🤡🤡🤡🤡</p>
<!-- more -->
<p>1.编写程序，输入一个自然数字符串，然后输出各位数字之和。例如，输入字符串1234，输出10.</p>
<pre><code class="language-python">from functools import reduce

input_str = input(&quot;请输入一个字符串&quot;)

print(reduce(lambda x, y: int(x) + int(y), input_str))
</code></pre>
<p>2.编写程序，输入一个字符串，输出翻转（首尾交替）后的字符串。例如，输入字符串12345，输出54321.</p>
<pre><code class="language-python">input_str = input(&quot;请输入一个字符串&quot;)
input_str = input_str[::-1]
print(input_str)
</code></pre>
<p>3.编写程序，输入一个包含若干整数的列表，输出列表中的最大值。例如，输入[1，2，3，4，5，888]，输出888.</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
print(max(input_list))
</code></pre>
<p>4.编写程序，输入一个包含若干整数的列表，把列表中所有整数转换为字符串，然后输出包含这些字符串的列表。例如，输入[1，2，3，4，5，888]，输出['1'，'2'，'3'，'4'，'5'，'888']。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

print(list(map(str, input_list)))

</code></pre>
<p>5.编写程序，输入一个包含若干任意数据的列表，输出该列表中等价于True的元素组成的列表。例如，输入[1，2，0，None，False，'a']，输出[1，2，'a']。</p>
<pre><code class="language-python">def fun(new_str):
    if new_str is None:
        return False
    if new_str is False:
        return False
    if new_str == 0:
        return False
    return True


input_list = eval(input(&quot;请输入一个列表&quot;))
OutList = list(filter(fun, input_list))
print(OutList)
</code></pre>
<p>6.编写程序，输入一个包含若干自然数的列表，输出这些自然数的平均值。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
out_int = reduce((lambda x, y: x + y), input_list)
print(&quot;%.3f&quot; % (out_int / len(input_list)))
</code></pre>
<p>7.编写程序，输入一个包含若干自然数的列表，输出这些自然数降序排列的新列表。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))

new_list = sorted(input_list, reverse=True)
print(new_list)
</code></pre>
<p>8.编写程序，输入一个包含若干自然数的列表，输出一个新列表，新列表中每个元素为原列表中每个自然数的位数。例如，输入[1，888，99，23456]，输出为[1，3，2，5]。</p>
<pre><code class="language-python">input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = list(map(lambda x: len(str(x)), input_list))
print(out_list)
</code></pre>
<p>9.编写程序，输入一个包含若干实数的列表，输出其中绝对值最大的实数。例如，输入[-8，64，3.5，-89]，输出-89。</p>
<pre><code class="language-python">from functools import reduce


def fun(x, y):
    if abs(x) &gt; abs(y):
        return x
    else:
        return y


input_list = eval(input(&quot;请输入一个列表&quot;))
out_list = reduce(fun, input_list)
print(out_list)
</code></pre>
<p>10.编写程序，输入一个包含若干整数的列表，输出这些整数的乘积。例如，输入[-2，3，4]，输出-24。</p>
<pre><code class="language-python">from functools import reduce

input_list = eval(input(&quot;请输入一个列表&quot;))
output = reduce(lambda x, y: x * y, input_list)
print(output)
</code></pre>
<p>11.编写程序，输入两个包含着若干整数的等长列表，把这两个列表看作两个向量，输出这两个向量的内积。</p>
<pre><code class="language-python">from functools import reduce

li1 = eval(input('请输入第一个列表'))
li2 = eval(input('请输入第二个列表'))
print(list(reduce(lambda x, y: x * y, (li1, li2))))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python笔记]]></title>
        <id>https://zhuoquany.github.io/post/pythonbiji/</id>
        <link href="https://zhuoquany.github.io/post/pythonbiji/">
        </link>
        <updated>2020-04-13T06:58:53.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="身份运算符">身份运算符</h1>
<p>身份运算符用于比较两个对象的<strong>内存地址</strong>是否一致——是否是对同一个对象的引用</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="身份运算符">身份运算符</h1>
<p>身份运算符用于比较两个对象的<strong>内存地址</strong>是否一致——是否是对同一个对象的引用</p>
<!-- more -->
<h2 id="is-与-is-not">is 与 is  not</h2>
<table>
<thead>
<tr>
<th>运算符</th>
<th style="text-align:center">描述</th>
<th style="text-align:right">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>is</td>
<td style="text-align:center">is是判断两个标识符是不是引用同一个对象</td>
<td style="text-align:right">x is y，类似id(x)==id(y)</td>
</tr>
<tr>
<td>is not</td>
<td style="text-align:center">is not是判断两个标识符是不是引用不同对象</td>
<td style="text-align:right">x is not y，类似id(x)!=id(y)</td>
</tr>
</tbody>
</table>
<h2 id="is与区别">is与==区别：</h2>
<p>is用于判断两个变量引用对象是否为同一个<br>
==用于判断引用变量的值是否相等<br>
判断None与False用is</p>
<pre><code class="language-python">    if new_str is None:
        return False
    if new_str is False:
        return False
</code></pre>
<h1 id="输入列表">输入列表</h1>
<pre><code class="language-python">
'''
编写程序，输入一个包含若干整数的列表，输出列表中的最大值。例如，输入[1, 2, 3,4, 5, 888]输出888。
输入[1, 2, 3,4, 5, 888]
eval就会把它从字符串转换为列表。
'''
input_list = eval(input(&quot;请输入一个列表&quot;))

print(max(input_list))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python安装教程]]></title>
        <id>https://zhuoquany.github.io/post/python-an-zhuang-jiao-cheng/</id>
        <link href="https://zhuoquany.github.io/post/python-an-zhuang-jiao-cheng/">
        </link>
        <updated>2020-03-25T05:38:51.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="1-下载python解释器并安装">1. 下载python解释器并安装</h1>
<p>官方地址: <a href="https://www.python.org/downloads/release/python-377/">https://www.python.org/downloads/release/python-377/</a><br>
🤡🤡🤡</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="1-下载python解释器并安装">1. 下载python解释器并安装</h1>
<p>官方地址: <a href="https://www.python.org/downloads/release/python-377/">https://www.python.org/downloads/release/python-377/</a><br>
🤡🤡🤡</p>
<!-- more -->
<p>查找对应版本，找到目标文件： <a href="https://www.python.org/ftp/python/3.7.7/python-3.7.7-amd64.exe">Windows x86-64 executable installer</a> 下载即可</p>
<figure data-type="image" tabindex="1"><img src="http://qiniu.youis.top/image-20200325121059112.png" alt="image-20200325121059112" loading="lazy"></figure>
<h1 id="2-安装解释器">2. 安装解释器</h1>
<p>(1)  点击.exe文件，注意：勾选添加到环境变量，然后点击（customize installation）自定义安装，<br>
<img src="http://qiniu.youis.top/image-20200325121124154.png" alt="image-20200325121124154" loading="lazy"></p>
<p>（2）进入如下界面，这是一些可选的项，全部默认勾选进行下一步<br>
<img src="http://qiniu.youis.top/image-20200325121131108.png" alt="image-20200325121131108" loading="lazy"></p>
<p>（3）选择安装路径，选择自己的安装路径</p>
<figure data-type="image" tabindex="2"><img src="http://qiniu.youis.top/image-20200325121145741.png" alt="image-20200325121145741" loading="lazy"></figure>
<p>（4）安装<br>
<img src="http://qiniu.youis.top/image-20200325121155998.png" alt="image-20200325121155998" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="http://qiniu.youis.top/image-20200325121203778.png" alt="image-20200325121203778" loading="lazy"></figure>
<pre><code>     测试是否安装成功，在dos控制台窗口输入python,pip命令。
</code></pre>
<figure data-type="image" tabindex="4"><img src="http://qiniu.youis.top/image-20200325121246869.png" alt="image-20200325121246869" loading="lazy"></figure>
<h1 id="升级pip版本如果需要则使用">升级pip版本（如果需要则使用）</h1>
<figure data-type="image" tabindex="5"><img src="http://qiniu.youis.top/image-20200325121255095.png" alt="image-20200325121255095" loading="lazy"></figure>
<ol>
<li>单独下载pip并安装（如果python中已经存在，则不需要）</li>
</ol>
<figure data-type="image" tabindex="6"><img src="http://qiniu.youis.top/image-20200325121305672.png" alt="image-20200325121305672" loading="lazy"></figure>
<ol>
<li>下载链接</li>
</ol>
<p><a href="https://pypi.python.org/pypi/pip#downloads">https://pypi.python.org/pypi/pip#downloads</a></p>
<ol start="2">
<li>[解压]{.underline}</li>
</ol>
<figure data-type="image" tabindex="7"><img src="http://qiniu.youis.top/image-20200325121318107.png" alt="image-20200325121318107" loading="lazy"></figure>
<ol start="3">
<li>安装pip，默认安装在python的script目录下</li>
</ol>
<figure data-type="image" tabindex="8"><img src="http://qiniu.youis.top/image-20200325121333792.png" alt="image-20200325121333792" loading="lazy"></figure>
<ol start="4">
<li>配置pip环境变量，在window的环境变量path中</li>
</ol>
<figure data-type="image" tabindex="9"><img src="http://qiniu.youis.top/image-20200325121340959.png" alt="image-20200325121340959" loading="lazy"></figure>
<ol start="5">
<li>测试是否安装成功</li>
</ol>
<figure data-type="image" tabindex="10"><img src="http://qiniu.youis.top/image-20200325121348746.png" alt="image-20200325121348746" loading="lazy"></figure>
<h1 id="3-进行扩展库安装">3.  进行扩展库安装</h1>
<ol>
<li>查看已安装的模块</li>
</ol>
<figure data-type="image" tabindex="11"><img src="http://qiniu.youis.top/image-20200325121505990.png" alt="image-20200325121505990" loading="lazy"></figure>
<ol start="2">
<li>进行在线安装</li>
</ol>
<figure data-type="image" tabindex="12"><img src="http://qiniu.youis.top/image-20200325121513476.png" alt="image-20200325121513476" loading="lazy"></figure>
<p>也可以通过其他镜像下载：pip install -i http://pypi.douban.com/simple --trusted-host pypi.douban.com pandas</p>
<ol start="3">
<li>
<p>离线安装</p>
<ol>
<li>
<p>下载模块文件.whl</p>
<p>地址： <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>选择对应的whl文件下载：</p>
</li>
</ol>
</li>
</ol>
<figure data-type="image" tabindex="13"><img src="http://qiniu.youis.top/image-20200325121530859.png" alt="image-20200325121530859" loading="lazy"></figure>
<ol start="2">
<li>通过pip安装</li>
</ol>
<figure data-type="image" tabindex="14"><img src="http://qiniu.youis.top/image-20200325121538377.png" alt="image-20200325121538377" loading="lazy"></figure>
<ol start="4">
<li>卸载</li>
</ol>
<figure data-type="image" tabindex="15"><img src="http://qiniu.youis.top/image-20200325121545274.png" alt="image-20200325121545274" loading="lazy"></figure>
<ol start="4">
<li>
<p>下载并安装集成开发环境PyCharm或者Anaconda3</p>
<p>官方地址：<a href="https://www.jetbrains.com/pycharm/download/#section=windows">[https://www.jetbrains.com/pycharm/download/#section=windows]{.underline}</a></p>
</li>
</ol>
<figure data-type="image" tabindex="16"><img src="http://qiniu.youis.top/image-20200325121555613.png" alt="image-20200325121555613" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PicGo+Typora实现图片自动上传]]></title>
        <id>https://zhuoquany.github.io/post/picgotypora-shi-xian-tu-pian-zi-dong-shang-chuan/</id>
        <link href="https://zhuoquany.github.io/post/picgotypora-shi-xian-tu-pian-zi-dong-shang-chuan/">
        </link>
        <updated>2020-03-14T13:27:43.000Z</updated>
        <summary type="html"><![CDATA[<p>😁😁😁自建博客，图片自动上传图床，提高网站访问速度。</p>
]]></summary>
        <content type="html"><![CDATA[<p>😁😁😁自建博客，图片自动上传图床，提高网站访问速度。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="http://qiniu.youis.top/image-20200314211831488.png" alt="image-20200314211831488" loading="lazy"></figure>
<p>图床我用的七牛云。</p>
<figure data-type="image" tabindex="2"><img src="http://qiniu.youis.top/image-20200314212120529.png" alt="image-20200314212120529" loading="lazy"></figure>
<p>确认区域那里有一点坑，z0,z1,z2,z3表示七牛的四个存储区域。</p>
<p>进行一下的设置。</p>
<figure data-type="image" tabindex="3"><img src="http://qiniu.youis.top/image-20200314212420305.png" alt="image-20200314212420305" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="http://qiniu.youis.top/image-20200314212334602.png" alt="image-20200314212334602" loading="lazy"></figure>
<p>然后就可以了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Anaconda 入门(一)]]></title>
        <id>https://zhuoquany.github.io/post/anaconda-ru-men-yi/</id>
        <link href="https://zhuoquany.github.io/post/anaconda-ru-men-yi/">
        </link>
        <updated>2020-03-12T10:09:19.000Z</updated>
        <summary type="html"><![CDATA[<p>Anaconda 是什么？<br>
Anaconda 是一个可用于科学计算的 Python 发行版，支持 Linux、Mac、Windows系统，内置了常用的科学计算包。它解决了官方 Python 的两大痛点。<br>
⚽️⚽️⚽️</p>
]]></summary>
        <content type="html"><![CDATA[<p>Anaconda 是什么？<br>
Anaconda 是一个可用于科学计算的 Python 发行版，支持 Linux、Mac、Windows系统，内置了常用的科学计算包。它解决了官方 Python 的两大痛点。<br>
⚽️⚽️⚽️</p>
<!-- more -->
<ul>
<li>第一：提供了包管理功能，Windows 平台安装第三方包经常失败的场景得以解决，</li>
<li>第二：提供环境管理的功能，功能类似 Virtualenv，解决了多版本Python并存、切换的问题。</li>
</ul>
<h1 id="下载-anaconda">下载 Anaconda</h1>
<p>直接在<a href="https://www.anaconda.com/distribution/">官网下载</a>安装包， 选择 Python3.6 的安装包进行下载，下载完成后直接安装，安装过程选择默认配置即可，大约需要1.8G的磁盘空间。<br>
我选择的是国内下载<br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学开源镜像网站</a><br>
<img src="http://qiniu.youis.top/20200312181813.png" alt="" loading="lazy"><br>
<img src="http://qiniu.youis.top/20200312181916.png" alt="" loading="lazy"><br>
下载以后安装就行。<br>
具体安装过程看这篇<a href="https://blog.csdn.net/xhbspark/article/details/89929458">博文</a></p>
<h1 id="conda-工具介绍">conda 工具介绍</h1>
<p>conda 是 Anaconda 下用于包管理和环境管理的工具，功能上类似 pip 和 vitualenv 的组合。安装成功后 conda 会默认加入到环境变量中，因此可直接在命令行窗口运行命令 conda</p>
<p>conda 的环境管理与 virtualenv 是基本上是类似的操作。</p>
<pre><code># 查看帮助
conda -h 
# 基于python3.6版本创建一个名字为python36的环境
conda create --name python36 python=3.6 
# 激活此环境
activate python36  
source activate python36 # linux/mac
# 再来检查python版本，显示是 3.6
python -V  
# 退出当前环境
deactivate python36 
# 删除该环境
conda remove -n python36 --all
# 或者 
conda env remove  -n python36

# 查看所以安装的环境
conda info -e
python36              *  D:\Programs\Anaconda3\envs\python36
root                     D:\Programs\Anaconda3
</code></pre>
<p>conda 的包管理功能可 pip 是一样的，当然你选择 pip 来安装包也是没问题的。</p>
<pre><code># 安装 matplotlib 
conda install matplotlib
# 查看已安装的包
conda list 
# 包更新
conda update matplotlib
# 删除包
conda remove matplotlib
</code></pre>
<p>在 conda 中 anything is a package。conda 本身可以看作是一个包，python 环境可以看作是一个包，anaconda 也可以看作是一个包，因此除了普通的第三方包支持更新之外，这3个包也支持。比如：</p>
<pre><code># 更新conda本身
conda update conda
# 更新anaconda 应用
conda update anaconda
# 更新python，假设当前python环境是3.6.1，而最新版本是3.6.2，那么就会升级到3.6.2
conda update python
</code></pre>
<h1 id="修改镜像地址">修改镜像地址</h1>
<h2 id="anaconda-换源">anaconda 换源</h2>
<p>Anaconda 的镜像地址默认在国外，用 conda 安装包的时候会很慢，目前可用的国内镜像源地址有清华大学的。修改 ~/.condarc (Linux/Mac) 或 C:\Users\当前用户名.condarc (Windows) 配置：</p>
<pre><code>channels:
 - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
 - defaults
show_channel_urls: true
</code></pre>
<h2 id="pip换源">pip换源</h2>
<p>如果使用conda安装包的时候还是很慢，那么可以考虑使用pip来安装，同样把 pip 的镜像源地址也改成国内的，我用的是阿里云。修改 ~/.pip/pip.conf (Linux/Mac) 或 C:\Users\当前用户名\pip\pip.ini (Windows) 配置：</p>
<pre><code>[global]
timeout = 6000
index-url =http://mirrors.aliyun.com/pypi/simple/
trusted-host= mirrors.aliyun.com
</code></pre>
<h1 id="遇到的问题">遇到的问题</h1>
<p>##命令行打开提示UnicodeDecodeError: 'gbk' codec can't decode byte 0x9a in position 17: illegal multibyte sequence<br>
<img src="http://qiniu.youis.top/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20200323151719.png" alt="" loading="lazy"><br>
根据File<br>
&quot;D:\soft\anaconda3\lib\site-packages\pyreadline\lineeditor\history.py&quot;, line 82, in read_history_file for line in open(filename, 'r'):<br>
在原有的open函数里 新增了一个参数选项encoding='utf-8'<br>
就可以解决了<br>
把(filename, 'r' )修改为(filename, 'r',encoding='utf-8' )</p>
<h2 id="弹出警告">弹出警告</h2>
<p>This Python interpreter is in a conda environment, but the environment has not been activated.  Libraries may fail to load.  To activate this environment please see https://conda.io/activation<br>
解决方式</p>
<p>使用终端或Anaconda提示符执行以下步骤。</p>
<p>默认情况下，活动环境---您当前使用的环境---显示在命令提示符开头的括号（）或括号[]中：(myenv) $<br>
　　如果您没有看到这个，请运行：conda info --envs<br>
　　在显示的环境列表中，当前环境以星号（*）突出显示</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ TensorFlow2.0 入门]]></title>
        <id>https://zhuoquany.github.io/post/tensorflow20-ru-men/</id>
        <link href="https://zhuoquany.github.io/post/tensorflow20-ru-men/">
        </link>
        <updated>2020-02-25T02:41:03.000Z</updated>
        <summary type="html"><![CDATA[<p>包含前向传播，手写数字识别，以及遇到的一些错误的解决方法。</p>
]]></summary>
        <content type="html"><![CDATA[<p>包含前向传播，手写数字识别，以及遇到的一些错误的解决方法。</p>
<!-- more  -->
<h2 id="前向传播">前向传播</h2>
<pre><code class="language-python">#conding:utf-8
import  tensorflow as tf
from tensorflow  import  keras
from  tensorflow.keras import datasets
import  os
os.environ['TF_CPP_MIN_LOG_LEVEL']='2'
'''
0 全部输出
2 仅输出错误信息
'''
'''
loss = nan 梯度爆炸'''
# x:[60k,28,28]
# y: [60k]
(x,y),(x_test,y_test) = datasets.mnist.load_data()
# 转换为Tensor
x = tf.convert_to_tensor(x,dtype=tf.float32) / 255
y = tf.convert_to_tensor(y,dtype=tf.int32)

x_test = tf.convert_to_tensor(x_test,dtype=tf.float32) / 255
y_test = tf.convert_to_tensor(y_test,dtype=tf.int32)
print(x.shape,y.shape,x.dtype,y.dtype)
print(tf.reduce_min(x),tf.reduce_max(x))
print(tf.reduce_min(y),tf.reduce_max(y))

train_db = tf.data.Dataset.from_tensor_slices((x,y)).batch(128)
test_db = tf.data.Dataset.from_tensor_slices((x_test,y_test)).batch(128)
train_iter = iter(train_db) # 生成迭代器
sample = next(train_iter)
print('batch :',sample[0].shape)

# [b,728] =&gt; [b,512] =&gt; [b,128]  =&gt; [b,10]
w1 = tf.Variable(tf.random.truncated_normal([784,256],stddev=0.1))
b1 = tf.Variable(tf.zeros([256]))
w2= tf.Variable(tf.random.truncated_normal([256,128],stddev=0.1))
b2 = tf.Variable(tf.zeros([128]))
w3 = tf.Variable(tf.random.truncated_normal([128,10],stddev=0.1))
b3 = tf.Variable(tf.zeros([10]))
lr = 1e-3
# h1 = x@w1 + b1
for epoch in range(10):
    for step,(x,y) in enumerate(train_db):
        # x:[128,28,28]
        # y: [128]
        # x: [b,28*28]
        # h1 = x@w1 + b1;
        # [b.784]@[784,256] + [256] =&gt;  [b,256] +[256] =&gt; b[256] + [256]
        x = tf.reshape(x,[-1,28*28])
        with tf.GradientTape() as  tape:
            h1 = x@w1 + tf.broadcast_to(b1,[x.shape[0],256])
            h1 = tf.nn.relu(h1)
            h2 = h1@w2 + b2
            out = h2@w3 + b3

            # compute loss
            # out[b,10]
            # y: [b] =&gt; [b,10]
            y_onehot = tf.one_hot(y,depth=10)
            # mes = mean((y-out)^2)
            # [b,10]
            loss = tf.square(y_onehot - out)
            # mean: scalar
            loss = tf.reduce_mean(loss)
        grads = tape.gradient(loss,[w1,b1,w2,b2,w3,b3])
        w1.assign_sub(lr * grads[0])
        b1.assign_sub(lr * grads[1])
        w2.assign_sub(lr * grads[2])
        b2.assign_sub(lr * grads[3])
        w3.assign_sub(lr * grads[4])
        b3.assign_sub(lr * grads[5])
        '''
        w1 = w1 - lr * grads[0]
        b1 =b1 - lr * grads[1]
        w2 = w2 - lr * grads[2]
        b2 = b2 - lr * grads[3]
        w3 = w3 - lr * grads[4]
        b3 = b3 - lr * grads[5]
        '''
        if step % 100 == 0:
            print(epoch,step,'loss = ',float(loss))

    total_correct = 0
    total_num = 0
    for  step,(x,y) in enumerate(test_db):
        x = tf.reshape(x,[-1,28*28])
        h1 = tf.nn.relu(x@w1+b1)
        h2 = tf.nn.relu(h1@w2 + b2)
        out = h2@w3 + b3
        # int 64

        prob = tf.nn.softmax(out,axis=1)
        pred = tf.argmax(prob,axis=1)
        #print(pred.shape,out.shape,prob.shape)
        pred = tf.cast(pred,dtype=tf.int32)
        #print(pred.shape,y.shape)
        correct = tf.cast(tf.equal(pred,y),dtype=tf.int32)
        correct = tf.reduce_sum(correct)

        total_correct += int(correct)
        total_num += x.shape[0]
    acc = total_correct / total_num
    print(&quot;test acc: &quot;,acc)
</code></pre>
<h2 id="mnist数据体验">mnist数据体验</h2>
<pre><code class="language-python">#conding:utf-8

# 导入TensorFlow和tf.keras

import tensorflow as tf
from tensorflow import keras
from  tensorflow.keras import datasets

from keras.datasets import boston_housing

# 导入辅助库

import numpy as np
import matplotlib.pyplot as plt

#(train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data()

(train_images, train_labels), (test_images, test_labels) = boston_housing.load_data()
class_names = ['0','1','2','3','4','5','6','7','8','9']

train_images = train_images / 255.0
test_images = test_images / 255.0

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation=tf.nn.relu),
    keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=5)

test_loss, test_acc = model.evaluate(test_images, test_labels)
print('Test accuracy:', test_acc)
</code></pre>
<h2 id="遇见的问题">遇见的问题</h2>
<h3 id="导入fashionminst数据问题">导入fashionminst数据问题</h3>
<p>报错</p>
<pre><code class="language-python">EOFError: Compressed file ended before the end-of-stream marker was reached
</code></pre>
<p>解决问题方法：</p>
<p>fashion-mnist数据缓存位置 ：</p>
<pre><code class="language-python"> C:\Users\（你的Windows用户名）\.keras\datasets\\fashion-mnist
</code></pre>
<p>删除fashion-mnist文件夹，然后重新加载数据就可以了。</p>
<h3 id="fashion-minst数据集更换国内可用连接">fashion-minst数据集更换国内可用连接</h3>
<p>在你的TensorFlow库文件里面，更改fashion_mnist.py文件，具体路径如下：</p>
<pre><code>envs\\tensorflow\lib\site-packages\tensorflow\python\keras\datasets\fashion_mnist.py
</code></pre>
<p>把代码中的</p>
<p>base = 'https://storage.googleapis.com/tensorflow/tf-keras-datasets/'</p>
<p>替换为如下连接：  base = 'http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/'</p>
<p>其他数据源也可以通过类似的方法更改，不错连接要准确。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[oracle的安装和使用]]></title>
        <id>https://zhuoquany.github.io/post/oracle-de-an-zhuang-he-shi-yong/</id>
        <link href="https://zhuoquany.github.io/post/oracle-de-an-zhuang-he-shi-yong/">
        </link>
        <updated>2020-02-25T02:39:56.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="防火墙的关闭">防火墙的关闭</h2>
<p>chkconfig iptables off（设置自动启动为关闭）</p>
<p>chkconfig iptables on（设置自动启动为启动）</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="防火墙的关闭">防火墙的关闭</h2>
<p>chkconfig iptables off（设置自动启动为关闭）</p>
<p>chkconfig iptables on（设置自动启动为启动）</p>
<!--more-->
<p>chkconfig --del iptables（移除开启自启动）</p>
<p>chkconfig --add iptables（增加开启自启动）</p>
<p>service iptables status          --查看防火墙状态</p>
<h2 id="数据库的启动">数据库的启动</h2>
<p>lsnrctl  start   启动数库监听程序</p>
<p>lsnrctl  stop  停止监听程序</p>
<p>lsnrctl   status  查看监听程序状态</p>
<p>sqlplus   &quot;/as  sysdba&quot;  进入数据库库</p>
<p>startup  启动数据库</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linear  regression(线性回归)]]></title>
        <id>https://zhuoquany.github.io/post/linear-regressionxian-xing-hui-gui/</id>
        <link href="https://zhuoquany.github.io/post/linear-regressionxian-xing-hui-gui/">
        </link>
        <updated>2020-02-25T02:38:59.000Z</updated>
        <summary type="html"><![CDATA[<p>这是一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y=wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 的线性回归代码。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这是一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><mi>w</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y=wx+b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span> 的线性回归代码。</p>
<!-- more -->
<pre><code class="language-python">#conding:utf-8
import  numpy as  np
import matplotlib.pyplot as plt
'''
线性回归（linear  regression）
'''
def compute_error_for_line_given_points(b,w,points):
    totalError = 0
    # 循环叠加每一个点的误差。
    for i in range(0,len(points)):
        x = points[i,0]
        y = points[i,1]
        #computer mean-squared-error
        # ** 2表示平方
        totalError += (y-(w*x+b)) ** 2
    return  totalError / float(len(points))
def step_gradient(b_current,w_current,points,learningRate):
    b_gradient = 0
    w_gradient = 0
    N = float(len(points))
    for i in range(0,len(points)):
        x = points[i,0]
        y = points[i,1]
        # grad_b = 2(wx+b-y)
        b_gradient += (2/N) * ((w_current * x + b_current) - y )
        # grad_W = w(wx+b-y)*x
        w_gradient += (2/N) * x * ((w_current * x + b_current) - y)
    # update w'
    new_b = b_current - (learningRate * b_gradient)
    new_w = w_current - (learningRate * w_gradient)
    return [new_b,new_w]
def gradient_descent_runner(points,starting_b,starting_w,learning_rate,num_iterations):
    b = starting_b
    w = starting_w
    # update for serveral times
    # num_iterations 循环次数。
    for i in range(num_iterations):
        b,w = step_gradient(b,w,np.array(points),learning_rate)
    return [b,w]
def  run():
    # 生成随机训练集
    x = np.random.randint(-50, 160, size=130)
    y = 2.5 * x + 3.2
    points = np.column_stack((x, y))
    # 初始参数
    learning_rate = 0.0001 #学习率
    initial_b = 0
    initial_w = 0
    num_iterations = 1000 # 迭代次数。
    print(&quot;Starting gradient descent descrnt at b = {0}, w= {1},error = {2}&quot;
            .format(initial_b,initial_w,compute_error_for_line_given_points(initial_b,initial_w,points)))
    print(&quot;runing...&quot;)
    [b,w] = gradient_descent_runner(points,initial_b,initial_w,learning_rate,num_iterations)
    print(&quot;after {0} iterations b = {1},w={2},error ={3}&quot;
        .format(num_iterations,b,w,compute_error_for_line_given_points(b,w,points)))

    # 绘制散点图
    Scatter_plot(x, y, w, b)

def Scatter_plot(x,y,w,b):
    plt.scatter(x, y)
    plt.title('figure')
    plt.xlabel('X')
    plt.ylabel('y')
    plt.plot(x, x * w + b, 'm', linewidth=2)
    plt.show()

if __name__ == '__main__':
    run()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ip静态路由]]></title>
        <id>https://zhuoquany.github.io/post/ip-jing-tai-lu-you/</id>
        <link href="https://zhuoquany.github.io/post/ip-jing-tai-lu-you/">
        </link>
        <updated>2020-02-25T02:36:34.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="ip静态路由">ip静态路由</h1>
<p>网络拓扑图</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="ip静态路由">ip静态路由</h1>
<p>网络拓扑图</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://zhuoquany.github.io/post-images/1582598242156.png" alt="" loading="lazy"></figure>
<h2 id="基础">基础</h2>
<p>命令的格式一般是ip route-static 目的网络 掩码 网关 preference 优先级 。</p>
<p>报文传递流程:<br>
<img src="https://zhuoquany.github.io/post-images/1582598256463.png" alt="" loading="lazy"></p>
<h2 id="r1路由端口ip配置">R1路由端口ip配置</h2>
<p>为GigabitEthernet0/0/0  端口配置ip:192.168.1.1</p>
<p>为GigabitEthernet0/0/1  端口配置ip:192.168.4.1</p>
<p>interface GigabitEthernet0/0/0<br>
ip address 192.168.1.1 255.255.255.0<br>
interface GigabitEthernet0/0/1<br>
ip address 192.168.4.1 255.255.255.0</p>
<h2 id="r1路由静态ip配置">R1路由静态ip配置</h2>
<p>ip route-static 192.168.2.0 255.255.255.0 192.168.4.2<br>
ip route-static 192.168.3.0 255.255.255.0 192.168.4.2</p>
<p>解释：ip route-static  目的网段  子网掩码  下一跳地址</p>
<p>（我的理解就是 如果你要去找192.168.2.2这个ip，我应该发信息发送给192.168.4.2。而192.168.4.2这个ip就是路由R2 与R1路由相连端口的ip）</p>
<h2 id="详细配置">详细配置</h2>
<p>sys后直接复制粘贴改代码就好了</p>
<p>R1路由的配置</p>
<pre><code class="language-bash">interface GigabitEthernet0/0/0
 ip address 192.168.1.1 255.255.255.0
 quit
interface GigabitEthernet0/0/1
 ip address 192.168.4.1 255.255.255.0
quit
ip route-static 192.168.2.0 255.255.255.0 192.168.4.2
ip route-static 192.168.3.0 255.255.255.0 192.168.4.2
</code></pre>
<p>R2路由的配置</p>
<p>interface GigabitEthernet0/0/0<br>
ip address 192.168.4.2 255.255.255.0<br>
quit<br>
interface GigabitEthernet0/0/1<br>
ip address 192.168.6.1 255.255.255.0<br>
quit<br>
interface GigabitEthernet0/0/2<br>
ip address 192.168.5.1 255.255.255.0</p>
<p>quit</p>
<p>ip route-static 192.168.1.0 255.255.255.0 192.168.4.1<br>
ip route-static 192.168.2.0 255.255.255.0 192.168.6.2<br>
ip route-static 192.168.3.0 255.255.255.0 192.168.5.2</p>
<p>R4路由</p>
<p>interface GigabitEthernet0/0/1<br>
ip address 192.168.5.2 255.255.255.0<br>
quit<br>
interface GigabitEthernet0/0/2<br>
ip address 192.168.3.1 255.255.255.0</p>
<p>ip route-static 192.168.1.0 255.255.255.0 192.168.5.1<br>
ip route-static 192.168.2.0 255.255.255.0 192.168.5.1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[docker 部署PHP网页]]></title>
        <id>https://zhuoquany.github.io/post/docker-bu-shu-php-wang-ye/</id>
        <link href="https://zhuoquany.github.io/post/docker-bu-shu-php-wang-ye/">
        </link>
        <updated>2020-02-25T02:31:23.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="docker-部署php网页">docker 部署PHP网页</h2>
<p>准备好两个镜像</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="docker-部署php网页">docker 部署PHP网页</h2>
<p>准备好两个镜像</p>
<!-- more -->
<p><img src="https://zhuoquany.github.io/post-images/1582597946531.png" alt="" loading="lazy"><br>
然后创建两个容器:</p>
<pre><code class="language-bash">docker  run --name=&quot;apachedemo&quot;  -p 80:80   -d  nimmis/apache-php5

docker run --name mysqldemo -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -d mysql/mysql-server:latest
</code></pre>
<p>docker ps 查看两个容器的状态，如果docker ps 没有说明容器没有起来。</p>
<p>docker ps 默认查看的是正在运行的容器。<br>
<img src="https://zhuoquany.github.io/post-images/1582597959191.png" alt="" loading="lazy"></p>
<p>然后在游览器输入docker 宿主机的ip；docker  安装环境的ip；</p>
<p>（比如：虚拟机里面安装Linux，Linux里面安装docker ，你要访问网页应该输入Linux的ip）；</p>
<p>出现如下界面，则表示Apache服务安装没有问题。<br>
<img src="https://zhuoquany.github.io/post-images/1582597969085.png" alt="" loading="lazy"></p>
<p>​    在Linux上新建一个PHP 文件，这里我命名为 demo.php</p>
<p>输入一下内容。</p>
<p>ip地址根据自己的ip修改。</p>
<pre><code class="language-php">&lt;?php
header(&quot;Content-Type: text/html;charset=utf-8&quot;);
echo &quot;&lt;h1&gt;Results  from database&lt;/h1&gt;&quot;;
$servername = &quot;192.168.43.227&quot;;
$username = &quot;root&quot;;
$password = &quot;password&quot;;
$dbname = &quot;book&quot;;
 
$conn = mysqli_connect('192.168.10.9','root','root') or die(&quot;error:&quot; .mysqli_connect_error());
mysqli_select_db($conn,'book');
 
$sql = &quot;SELECT *  FROM student&quot;;
$result = mysqli_query($conn,$sql);
    while($row = mysqli_fetch_array($result)) {
        echo &quot;&lt;h2&gt;&quot;;
	echo $row['name']. &quot;&lt;br/&gt;&quot;;
	echo &quot;&lt;/h2&gt;&quot;;
    }
?&gt;
</code></pre>
<p>第一次访问可能会出现一下的错误：</p>
<p>这是因为mysql 没有开启远程登录权限。</p>
<p>我们进入mysql容器修改相应的权限。<br>
<img src="https://zhuoquany.github.io/post-images/1582597987851.png" alt="" loading="lazy"></p>
<pre><code class="language-bash">docker exec -it 1ed50ef86354  /bin/bash
</code></pre>
<p>docker exec -it  加容器ID或者容器名字可以进入docker容器内。</p>
<p>exit 退出容器。</p>
<p>mysql -uroot  -ppassword 登录mysql</p>
<pre><code class="language-mysql">use mysql;
SELECT User, Host FROM user;
update user set host = '%' where user = 'root';
 flush privileges;
</code></pre>
<p>顺便再创建一个表</p>
<pre><code class="language-mysql">create   database  book;

use book;

create  table  student (id int ,name varchar(20));

insert into student values(1,'Joy'),(2,'Tom'),(3,'James');
</code></pre>
<p>再次访问会出现如下错误:</p>
<p>Server sent charset unknown to the client. Please, report to the developers</p>
<p>这是因为mysql最新版的字符默认字符编码 utf8mb4，所以我们要设置MySQL的默认字符集为老版本的utf8<br>
<img src="https://zhuoquany.github.io/post-images/1582598002887.png" alt="" loading="lazy"></p>
<p>还是在mysql容器内执行</p>
<p>mysql  --help | grep my.cnf</p>
<p><img src="https://zhuoquany.github.io/post-images/1582598035668.png" alt="" loading="lazy"><br>
查看mysql配置文件的路径那。</p>
<p>我安装的mysql-service精简到了连vi和vim也没有，所以需要自己手动安装。用yum安装就好了。由于没有配置yum源所以会很慢。</p>
<p>修改/etc/my.cnf</p>
<pre><code>[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
collation-server = utf8_unicode_ci
character-set-server = utf8
default_authentication_plugin=mysql_native_password
</code></pre>
<p>修改配置文件后重启一下mysql 服务。</p>
<p>退出到Linux  系统，执行docker  restart mysqldemo</p>
<p>再次进入游览器，报错 The server requested authentication method unknown to the client。</p>
<p>是由于用户身份认证的加密方式不兼容导致的，<code>mysql8.0</code>中默认方式为<code>caching_sha2_password</code>，引起老版本兼容性问题，老版本加密方式为<code>mysql_native_password</code>。<br>
<img src="https://zhuoquany.github.io/post-images/1582598046444.png" alt="" loading="lazy"></p>
<pre><code class="language-bash">mysql -uroot -p
 
use mysql;
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码';
</code></pre>
<p>我们这里修改为</p>
<p>ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'password';</p>
<p>然后再次访问：<br>
<img src="https://zhuoquany.github.io/post-images/1582598055802.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>